{
  "C": [
    {
      "title1": "First C Program",
      "exp2": "Before starting the abcd of C language, you need to learn how to write, compile and run the first c program.\nTo write the first c program, open the C console and write the following code:",
      "code_exec3": "#include <stdio.h>    \nint main(){    \nprintf(\"Hello C Language\");    \nreturn 0;  \n}\n",
      "exp4": "#include <stdio.h> includes the standard input output library functions. \nThe printf() function is defined in stdio.h",
      "title5": "int main() :-",
      "exp6": "The main() function is the entry point of every program in c language.",
      "title7": "printf() :-",
      "exp8": "The printf() function is used to print data on the console.",
      "title9": "return 0 :-",
      "exp10": "The return 0 statement, returns execution status to the OS. The 0 value is used for successful execution and 1 for unsuccessful execution.",
      "topic": "Program Structure"
    },
    {
      "title1": "Data Types in C",
      "exp2": "In C programming, data types are declarations for variables. This determines the type and size of data associated with variables.\n\nExample :",
      "code_not_exec3": "int myVar;\n",
      "exp4": "Here, myVar is a variable of int (integer) type. The size of int is 4 bytes.",
      "title5": "int",
      "exp6": "Integers are whole numbers that can have both zero, positive and negative values but no decimal values. For example, 0, -5, 10\n\nWe can use int for declaring an integer variable.\n\nExample :",
      "code_not_exec7": "int id;\n",
      "title8": "float and double",
      "exp9": "float and double are used to hold real numbers.\n\nExample :",
      "code_not_exec10": "float salary;\ndouble price;\n",
      "exp11": "In C, floating-point numbers can also be represented in exponential.\n\nExample :",
      "code_not_exec12": "float normalizationFactor = 22.442e2;\n",
      "exp13": "What's the difference between float and double?\nThe size of float (single precision float data type) is 4 bytes. And the size of double (double precision float data type) is 8 bytes.",
      "title14": "char",
      "exp15": "Keyword char is used for declaring character type variables.\n\nExample :",
      "code_not_exec16": "char test = 'h';\n",
      "exp17": "The size of the character variable is 1 byte.",
      "title18": "void",
      "exp19": "void is an incomplete type. It means \"nothing\" or \"no type\". You can think of void as absent.\n\nFor example, if a function is not returning anything, its return type should be void.\n\nNote that, you cannot create variables of void type.",
      "title20": "short and long",
      "exp21": "If you need to use a large number, you can use a type specifier long. Here's how:\n\nExample :",
      "code_not_exec22": "long a;\nlong long b;\nlong double c;\n",
      "exp23": "Here variables a and b can store integer values. And, c can store a floating-point number.\n\nIf you are sure, only a small integer ([−32,767, +32,767] range) will be used, you can use short.",
      "code_not_exec24": "short d;\n",
      "title25": "signed and unsigned",
      "exp26": "In C, signed and unsigned are type modifiers. You can alter the data storage of a data type by using them.\n\nExample :",
      "code_not_exec27": "unsigned int x;\nint y;\n",
      "exp28": "Here, the variable x can hold only zero and positive values because we have used the unsigned modifier.\n\nConsidering the size of int is 4 bytes, variable y can hold values from -231 to 231-1, whereas variable x can hold values from 0 to 232-1.",
      "topic": "data types"
    },
    {
      "title1": "Keywords in C",
      "exp2": "A keyword is a reserved word. You cannot use it as a variable name, constant name, etc. There are only 32 reserved words (keywords) in the C language.\n\nA list of 32 keywords in the c language is given below:",
      "exp3": "• auto\t• break\t• case\t• char\t• const\t• continue\n• default\t• do\t• double\t• else\t• enum\t• extern\t• float\t• for\t• goto\t• if\t• int\t• long\t• register\n• return\t• short\t• signed\t• sizeof\t• static\n• struct\t• switch\t• typedef\t• union\t• unsigned\t• void\t• volatile\t• while",
      "title4": "C Identifiers",
      "exp5": "Identifier refers to name given to entities such as variables, functions, structures etc.\n\nIdentifiers must be unique. They are created to give a unique name to an entity to identify it during the execution of the program.\n\nFor example:",
      "code_not_exec6": "int money;\ndouble accountBalance;\n",
      "exp7": "Here, money and accountBalance are identifiers.\n\nAlso remember, identifier names must be different from keywords. You cannot use int as an identifier because int is a keyword.",
      "title8": "Rules for naming identifiers",
      "exp9": "1. A valid identifier can have letters (both uppercase and lowercase letters), digits and underscores.\n2. The first letter of an identifier should be either a letter or an underscore.\n3. You cannot use keywords as identifiers.\n4. There is no rule on how long an identifier can be. However, you may run into problems in some compilers if the identifier is longer than 31 characters.",
      "topic": "Keywords & Identifiers"
    },
    {
      "title1": "Variables in C",
      "exp2": "A variable is a name of the memory location. It is used to store data. Its value can be changed: and it can be reused many times.\nIt is a way to represent memory location through symbol so that it can be easily identified.\nLet's see the syntax to declare a variable:",
      "code_not_exec3": "type variable_list;\n",
      "exp4": "The example of declaring the variable is given below:",
      "code_not_exec5": "int a;  \nfloat b;  \nchar c;\n",
      "exp6": "Here, a, b, c are variables.\nThe int, float, char are the data types.\nWe can also provide values while declaring the variables as given below:",
      "code_not_exec7": "//declaring 2 variable of integer type\nint a=10,b=20;  \nfloat f=20.8;  \nchar c='A'; \n",
      "title8": "Rules for defining variables",
      "exp9": "A variable can have alphabets, digits, and underscore.\nA variable name can start with the alphabet, and underscore only. It can't start with a digit.\nNo whitespace is allowed within the variable name.\nA variable name must not be any reserved word or keyword, e.g. int, float, etc.",
      "title10": "Valid variable names:",
      "code_not_exec11": "int a;  \nint _ab;  \nint a30;  \n",
      "title12": "Invalid variable names:",
      "code_not_exec13": "int 2;  \nint a b;  \nint long; \t",
      "title14": "Types of Variables in C",
      "exp15": "There are many types of variables in c:\n1. local variable\n2. global variable\n3. static variable\n4. automatic variable\n5. external variable",
      "title16": "Local Variable",
      "exp17": "A variable that is declared inside the function or block is called a local variable.\nIt must be declared at the start of the block",
      "code_not_exec18": "void function1(){  \nint x=10;//local variable  \n} \n",
      "exp19": "You must have to initialize the local variable before it is used.",
      "title20": "Global Variable",
      "exp21": "A variable that is declared outside the function or block is called a global variable. Any function can change the value of the global variable.\nIt is available to all the functions.\nIt must be declared at the start of the block.",
      "code_not_exec22": "int value=20;//global variable  \nvoid function1(){  \nint x=10;//local variable  \n} \n",
      "title23": "Static Variable",
      "exp24": "A variable that is declared with the static keyword is called static variable.\nIt retains its value between multiple function calls.",
      "code_not_exec25": "void function1(){  \nint x=10;//local variable  \nstatic int y=10;//static variable  \ny=y+1;\nprintf(\"%d,%d\",x,y);\n}\n",
      "exp26": "If you call this function many times, the local variable will print the same value for each function call, e.g, 11,11,11 and so on.\nBut the static variable will print the incremented value in each function call, e.g. 11, 12, 13 and so on.",
      "title27": "Automatic Variable",
      "exp28": "All variables in C that are declared inside the block, are automatic variables by default. We can explicitly declare an automatic variable using auto keyword.",
      "code_not_exec29": "void main(){  \nint x=10;//local variable (also automatic)  \nauto int y=20;//automatic variable  \n}  \n",
      "title30": "External Variable",
      "exp31": "We can share a variable in multiple C source files by using an external variable. To declare an external variable, you need to use extern keyword.\n\nmyfile.h",
      "code_not_exec32": "extern int x=10;\n//external variable (also global)\n",
      "exp33": "program1.c",
      "code_not_exec34": "#include \"myfile.h\"  \n#include <stdio.h>  \nvoid printValue(){  \n    printf(\"Global variable: %d\", global_variable);  \n}  \n",
      "topic": "Variables"
    },
    {
      "title1": "Constants in C",
      "exp2": "If you want to define a variable whose value cannot be changed, you can use the const keyword. This will create a constant.\n\nExample :",
      "code_not_exec3": "const double PI = 3.14;\n",
      "exp4": "Notice, we have added keyword const.\nHere, PI is a symbolic constant; its value cannot be changed.\n\nExample :",
      "code_not_exec5": "const double PI = 3.14;\nPI = 2.9; //Error\n",
      "exp": "You can also define a constant using the #define preprocessor directive. ",
      "topic": "Constants"
    },
    {
      "title1": "printf() function",
      "exp2": "The printf() function is used for output.\nIt prints the given statement to the console.\n\nSyntax :",
      "code_not_exec3": "printf(\"format string\",argument_list);  \n",
      "exp4": "The format string can be %d (integer), %c (character), %s (string), %f (float) etc.\n\nExample :",
      "code_exec5": "#include <stdio.h>    \nint main()\n{ \n    // Displays the string inside quotations\n    printf(\"C Programming\");\n    return 0;\n}\n",
      "title6": "scanf() function",
      "exp7": "The scanf() function is used for input.\nIt reads the input data from the console.\n\nSyntax :",
      "code_not_exec8": "scanf(\"format string\",argument_list);  \n",
      "exp9": "The format string can be %d (integer), %c (character), %s (string), %f (float) etc.\n\nExample :",
      "code_exec10": "#include <stdio.h>\nint main()\n{\n    int testInteger;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &testInteger);  \n    printf(\"Number = %d\",testInteger);\n    return 0;\n}\n",
      "topic": "printf() and scanf()"
    },
    {
      "title1": "if else Statement",
      "exp2": "The if-else statement in C is used to perform the operations based on some specific condition. The operations specified in if block are executed if and only if the given condition is true.\nThere are the following variants of if statement in C language.\n\n•  If statement\n•  If-else statement\n•  If else-if ladder\n•  Nested if",
      "title3": "if Statement",
      "exp4": "The syntax of the if statement in C programming is:",
      "code_not_exec5": "if (test expression) \n{\n   // statements to be executed if the test expression is true\n}\n",
      "title6": "How if statement works?",
      "exp7": "The if statement evaluates the test expression inside the parenthesis ().\n•  If the test expression is evaluated to true, statements inside the body of if are executed.\n•  If the test expression is evaluated to false, statements inside the body of if are not executed.\n\nExample:",
      "code_exec8": "// Program to display a number if it is negative\n#include <stdio.h>\nint main() {\n    int number;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &number);\n    // true if number is less than 0\n    if (number < 0) {\n        printf(\"You entered %d.\\n\", number);\n    }\n    printf(\"The if statement is easy.\");\n    return 0;\n}\n",
      "title9": "if-else Statement",
      "exp10": "The if statement may have an optional else block.\nThe syntax of the if-else statement is:",
      "code_not_exec11": "if (test expression) {\n    // statements to be executed if the test expression is true\n}\nelse {\n    // statements to be executed if the test expression is false\n}\n",
      "title12": "How if-else statement works?",
      "exp13": "If the test expression is evaluated to true,\n•  statements inside the body of if are executed.\n•  statements inside the body of else are skipped from execution.\nIf the test expression is evaluated to false,\n•  statements inside the body of else are executed\n•  statements inside the body of if are skipped from execution.\n\nExample:",
      "code_exec14": "// Check whether an integer is odd or even\n#include <stdio.h>\nint main() {\n    int number;\n    printf(\"Enter an integer: \");\n    scanf(\"%d\", &number);\n    // True if the remainder is 0\n    if  (number%2 == 0) {\n        printf(\"%d is an even integer.\",number);\n    }\n    else {\n        printf(\"%d is an odd integer.\",number);\n    }\n    return 0;\n}\n",
      "title15": "if else-if Ladder",
      "exp16": "The if else-if statement executes two different codes depending upon whether the test expression is true or false.\nSometimes, a choice has to be made from more than 2 possibilities.\nThe if else-if ladder allows you to check between multiple test expressions and execute different statements.\n\nSyntax of if else-if ladder statement:",
      "code_not_exec17": "if (test expression1) {\n   // statement(s)\n}\nelse if(test expression2) {\n   // statement(s)\n}\nelse if (test expression3) {\n   // statement(s)\n}\n.\n.\nelse {\n   // statement(s)\n}\n",
      "exp18": "Example:",
      "code_exec19": "// Program to relate two integers using =, > or < symbol\n\n#include <stdio.h>\nint main() {\n    int number1, number2;\n    printf(\"Enter two integers: \");\n    scanf(\"%d %d\", &number1, &number2);\n\n    //checks if the two integers are equal.\n    if(number1 == number2) {\n        printf(\"Result: %d = %d\",number1,number2);\n    }\n\n    //checks if number1 is greater than number2.\n    else if (number1 > number2) {\n        printf(\"Result: %d > %d\", number1, number2);\n    }\n\n    //checks if both test expressions are false\n    else {\n        printf(\"Result: %d < %d\",number1, number2);\n    }\n\n    return 0;\n}\n",
      "title20": "Nested if",
      "exp21": "It is possible to include an if-else statement inside the body of another if-else statement.\nThe syntax of the nested if-else statement is:\n",
      "code_not_exec22": "if( boolean_expression 1) {\n\n   /* Executes when the boolean expression 1 is true */\n   if(boolean_expression 2) {\n      /* Executes when the boolean expression 2 is true */\n   }\n}\n",
      "exp23": "Example:",
      "code_exec24": "#include <stdio.h>\n \nint main () {\n\n   /* local variable definition */\n   int a = 100;\n   int b = 200;\n \n   /* check the boolean condition */\n   if( a == 100 ) {\n   \n      /* if condition is true then check the following */\n      if( b == 200 ) {\n         /* if condition is true then print the following */\n         printf(\"Value of a is 100 and b is 200\\n\" );\n      }\n   }\n   \n   printf(\"Exact value of a is : %d\\n\", a );\n   printf(\"Exact value of b is : %d\\n\", b );\n \n   return 0;\n}\n",
      "topic": "if-else"
    },
    {
      "title1": "switch Statement",
      "exp2": "The switch statement allows us to execute one code block among many alternatives.\nYou can do the same thing with the if-else..if ladder. However, the syntax of the switch statement is much easier to read and write.\nSyntax of switch case:",
      "code_not_exec3": "switch(expression){    \ncase value1:    \n //code to be executed;    \n break;  //optional  \ncase value2:    \n //code to be executed;    \n break;  //optional  \n--    \n    \ndefault:     \n code to be executed if all cases are not matched;    \n}    \n",
      "title4": "How does the switch statement work?",
      "exp5": "• The expression is evaluated once and compared with the values of each case label.\n• If there is a match, the corresponding statements after the matching label are executed. For example, if the value of the expression is equal to constant2, statements after case constant2: are executed until break is encountered.\n• If there is no match, the default statements are executed.\n• If we do not use break, all statements after the matching label are executed.\n• By the way, the default clause inside the switch statement is optional.\nExample:",
      "code_exec6": "#include <stdio.h>\nint main () {\n   /* local variable definition */\n   char grade = 'B';\n\n   switch(grade) {\n      case 'A' :\n         printf(\"Excellent!\\n\" );\n         break;\n      case 'B' :\n      case 'C' :\n         printf(\"Well done\\n\" );\n         break;\n      case 'D' :\n         printf(\"You passed\\n\" );\n         break;\n      case 'F' :\n         printf(\"Better try again\\n\" );\n         break;\n      default :\n         printf(\"Invalid grade\\n\" );\n   }\n   \n   printf(\"Your grade is  %c\\n\", grade );\n \n   return 0;\n}\n",
      "title7": "Nested switch",
      "exp8": "It is possible to have a switch as a part of the statement sequence of an outer switch. Even if the case constants of the inner and outer switch contain common values, no conflicts will arise.\n\nThe syntax for a nested switch statement is as follows:",
      "code_exec9": "switch(ch1) {\n   case 'A': \n      printf(\"This A is part of outer switch\" );\n\t\t\n      switch(ch2) {\n         case 'A':\n            printf(\"This A is part of inner switch\" );\n            break;\n         case 'B': /* case code */\n      }\n\t  \n      break;\n   case 'B': /* case code */\n}\n",
      "exp10": "Example:",
      "code_exec11": "#include <stdio.h>\nint main () {\n   /* local variable definition */\n   int a = 100;\n   int b = 200;\n \n   switch(a) {\n   \n      case 100: \n         printf(\"This is part of outer switch\\n\", a );\n      \n         switch(b) {\n            case 200:\n               printf(\"This is part of inner switch\\n\", a );\n         }\n   }\n   \n   printf(\"Exact value of a is : %d\\n\", a );\n   printf(\"Exact value of b is : %d\\n\", b );\n \n   return 0;\n}\n",
      "topic": "switch"
    },
    {
      "title1": "for Loop",
      "exp2": "A for loop is a repetition control structure that allows you to efficiently write a loop that needs to execute a specific number of times.\nThe syntax of a for loop in C programming language is :",
      "code_not_exec3": "for ( init; condition; increment ) {\n   statement(s);\n}\n",
      "title4": "How for loop works?",
      "exp5": "• The initialization statement is executed only once.\n• Then, the test expression is evaluated. If the test expression is evaluated to false, the for loop is terminated.\n• However, if the test expression is evaluated to true, statements inside the body of for loop are executed, and the update expression is updated.\n• Again the test expression is evaluated.\n\nExample 1:",
      "code_exec6": "// Print numbers from 1 to 10\n#include <stdio.h>\nint main() {\n  int i;\n  for (i = 1; i < 11; ++i)\n  {\n    printf(\"%d \", i);\n  }\n  return 0;\n}\n",
      "exp7": "Example 2:",
      "code_exec8": "//Print table for the given number\n#include<stdio.h>  \nint main(){  \nint i=1,number=0;      \nprintf(\"Enter a number: \");    \nscanf(\"%d\",&number);    \nfor(i=1;i<=10;i++){      \nprintf(\"%d \\n\",(number*i));    \n}    \nreturn 0;  \n}    \n",
      "topic": "for loop"
    },
    {
      "title1": "while loop",
      "exp2": "A while loop in C programming repeatedly executes a target statement as long as a given condition is true.\nThe syntax of a while loop in C programming language is :",
      "code_not_exec3": "while(condition) {\n   statement(s);\n}\n",
      "title4": "How while loop works?",
      "exp5": "• The while loop evaluates the test expression inside the parenthesis ().\n• If the test expression is true, statements inside the body of while loop are executed. Then, the test expression is evaluated again.\n• The process goes on until the test expression is evaluated to false.\n• If the test expression is false, the loop terminates (ends).\n\nExample 1:",
      "code_exec6": "#include <stdio.h>\nint main () {\n   /* local variable definition */\n   int a = 10;\n   /* while loop execution */\n   while( a < 20 ) {\n      printf(\"value of a: %d\\n\", a);\n      a++;\n   }\n   return 0;\n}\n",
      "exp7": "Example 2:",
      "code_exec8": "// Print numbers from 1 to 5\n#include <stdio.h>\nint main()\n{\n    int i = 1;\n    \n    while (i <= 5)\n    {\n        printf(\"%d\\n\", i);\n        ++i;\n    }\n    return 0;\n}\n",
      "topic": "while loop"
    },
    {
      "title1": "do-while loop",
      "exp2": "Unlike for and while loops, which test the loop condition at the top of the loop, the do-while loop in C programming checks its condition at the bottom of the loop.\nA do-while loop is similar to a while loop, except the fact that it is guaranteed to execute at least one time.\nThe syntax of the do-while loop is:",
      "code_not_exec3": "do\n{\n   // statements inside the body of the loop\n}\nwhile (testExpression);\n",
      "title4": "How do-while loop works?",
      "exp5": "• The body of do-while loop is executed once. Only then, the test expression is evaluated.\n• If the test expression is true, the body of the loop is executed again and the test expression is evaluated.\n• This process goes on until the test expression becomes false.\n• If the test expression is false, the loop ends.\n\nExample 1:",
      "code_exec6": "#include <stdio.h>\nint main()\n{\n    int i = 1;\n    do\n    {\n        printf(\"%d \\n\", i);\n        i++;\n    } while (i <= 10);\n    return 0;\n}",
      "exp7": "Example 2:",
      "code_exec8": "// Program to add numbers until the user enters zero\n#include <stdio.h>\nint main()\n{\n    double number, sum = 0;\n    // the body of the loop is executed at least once\n    do\n    {\n        printf(\"Enter a number: \");\n        scanf(\"%lf\", &number);\n        sum += number;\n    }\n    while(number != 0.0);\n    printf(\"Sum = %.2lf\",sum);\n    return 0;\n}\n",
      "topic": "do-while loop"
    },
    {
      "title1": "C break statement",
      "exp2": "The break is a keyword in C which is used to bring the program control out of the loop. The break statement is used inside loops or switch statement. The break statement breaks the loop one by one, i.e., in the case of nested loops, it breaks the inner loop first and then proceeds to outer loops. The break statement in C can be used in the following two scenarios:\n1. With switch case\n2. With loop\n\nThe syntax of the break is:",
      "code_not_exec3": "//loop or switch case   \nbreak; \n",
      "exp4": "Example:",
      "code_exec5": "#include <stdio.h>\nint main () {\n   /* local variable definition */\n   int a = 10;\n   /* while loop execution */\n   while( a < 20 ) {\n      printf(\"value of a: %d\\n\", a);\n      a++;\n\t\t\n      if( a > 15) {\n         /* terminate the loop using break statement */\n         break;\n      }\n   }\n   return 0;\n}\n",
      "topic": "break"
    },
    {
      "title1": "continue statement",
      "exp2": "The continue statement in C language is used to bring the program control to the beginning of the loop. The continue statement skips some lines of code inside the loop and continues with the next iteration. It is mainly used for a condition so that we can skip some code for a particular condition.\n\nThe syntax of the break is:",
      "code_not_exec3": "//loop statements  \ncontinue;  \n//some lines of the code which is to be skipped \n",
      "exp4": "Example:",
      "code_exec5": "#include <stdio.h>\nint main()\n{\n    int i = 1; //initializing a local variable\n    //starting a loop from 1 to 10\n    for (i = 1; i <= 10; i++)\n    {\n        if (i == 5)\n        { //if value of i is equal to 5, it will continue the loop\n            continue;\n        }\n        printf(\"%d \\n\", i);\n    } //end of for loop\n    return 0;\n}\n",
      "topic": "continue"
    },
    {
      "title1": "goto Statement",
      "exp2": "The goto statement allows us to transfer control of the program to the specified label.\n\nSyntax of goto Statement:",
      "code_not_exec3": "label:   \n//some part of the code;   \ngoto label;  \n",
      "exp4": "Example:",
      "code_exec5": "#include <stdio.h>\nint main()\n{\n    int num, i = 1;\n    printf(\"Enter the number whose table you want to print?\");\n    scanf(\"%d\", &num);\ntable:\n    printf(\"%d x %d = %d\\n\", num, i, num * i);\n    i++;\n    if (i <= 10)\n        goto table;\n}\n",
      "topic": "goto"
    },
    {
      "title1": "functions",
      "exp2": "A function is a block of code that performs a specific task.\nSuppose, you need to create a program to create a circle and color it. You can create two functions to solve this problem:\n•create a circle function\n•create a color function\nDividing a complex problem into smaller chunks makes our program easy to understand and reuse.",
      "title3": "Types of function",
      "exp4": "There are two types of function in C programming:\n•Standard library functions\n•User-defined functions",
      "title5": "Standard library functions",
      "exp6": "The standard library functions are built-in functions in C programming.\nThese functions are defined in header files. For example,\n•The printf() is a standard library function to send formatted output to the screen (display output on the screen). This function is defined in the stdio.h header file.\nHence, to use the printf()function, we need to include the stdio.h header file using #include <stdio.h>.\n•The sqrt() function calculates the square root of a number. The function is defined in the math.h header file.\nExample:",
      "code_exec7": "#include <stdio.h>\nint main()\n{\n   printf(\"Catch me if you can.\"); \n}\n",
      "exp8": "If you want to use the printf() function, the header file <stdio.h> should be included.\nIf you try to use printf() without including the stdio.h header file, you will get an error.",
      "title9": "User-defined function",
      "exp10": "You can also create functions as per your need. Such functions created by the user are known as user-defined functions.\nThe syntax of the user-defined function is:",
      "code_not_exec11": "#include <stdio.h>\nvoid functionName()\n{\n    ... .. ...\n    ... .. ...\n}\nint main()\n{\n    ... .. ...\n    ... .. ...\n    functionName();\n    ... .. ...\n    ... .. ...\n}\n",
      "exp12": "The execution of a C program begins from the main() function.\nWhen the compiler encounters functionName();, control of the program jumps to\n void functionName()\nAnd, the compiler starts executing the codes inside functionName().",
      "title13": "Return Value",
      "exp14": "A C function may or may not return a value from the function. If you don't have to return any value from the function, use void for the return type.\nExample without return value:",
      "code_not_exec15": "void hello()\n{\n    printf(\"hello c\");\n}\n",
      "exp16": "If you want to return any value from the function, you need to use any data type such as int, long, char, etc. The return type depends on the value to be returned from the function.\nExample with return value:\n",
      "code_not_exec17": "int get()\n{\n    return 10;\n}\n",
      "title18": "Example for Function without return value",
      "code_exec19": "#include <stdio.h>\nvoid printName();\nvoid main()\n{\n    printf(\"Hello \");\n    printName();\n}\nvoid printName()\n{\n    printf(\"Code in Android\");\n}\n",
      "title20": "Example for Function with return value",
      "code_exec21": "#include<stdio.h>  \nint sum();  \nvoid main()  \n{  \n    int result;   \n    printf(\"\\nGoing to calculate the sum of two numbers:\");  \n    result = sum();  \n    printf(\"%d\",result);  \n}  \nint sum()  \n{  \n    int a,b;   \n    printf(\"\\nEnter two numbers\");  \n    scanf(\"%d %d\",&a,&b);  \n    return a+b;   \n}  \n",
      "topic": "what is function?"
    },
    {
      "title1": "Call by value",
      "exp2": "In call by value method, the value of the actual parameters is copied into the formal parameters. In other words, we can say that the value of the variable is used in the function call in the call by value method.\n•In call by value method, we can not modify the value of the actual parameter by the formal parameter.\n•In call by value, different memory is allocated for actual and formal parameters since the value of the actual parameter is copied into the formal parameter.\n•The actual parameter is the argument which is used in the function call whereas formal parameter is the argument which is used in the function definition.\n\nExample :",
      "code_exec3": "#include <stdio.h>\nvoid change(int num)\n{\n    printf(\"Before adding value inside function num=%d \\n\", num);\n    num = num + 100;\n    printf(\"After adding value inside function num=%d \\n\", num);\n}\nint main()\n{\n    int x = 100;\n    printf(\"Before function call x=%d \\n\", x);\n    change(x); //passing value in function\n    printf(\"After function call x=%d \\n\", x);\n    return 0;\n}\n",
      "title4": "Call by reference",
      "exp5": "•In call by reference, the address of the variable is passed into the function call as the actual parameter.\n•The value of the actual parameters can be modified by changing the formal parameters since the address of the actual parameters is passed.\n•In call by reference, the memory allocation is similar for both formal parameters and actual parameters. All the operations in the function are performed on the value stored at the address of the actual parameters, and the modified value gets stored at the same address.\n\nExample :",
      "code_exec6": "#include <stdio.h>\nvoid swap(int *, int *); //prototype of the function\nint main()\n{\n    int a = 10;\n    int b = 20;\n    printf(\"Before swapping the values in main a = %d, b = %d\\n\", a, b); // printing the value of a and b in main\n    swap(&a, &b);\n    printf(\"After swapping values in main a = %d, b = %d\\n\", a, b); // The values of actual parameters do change in call by reference, a = 10, b = 20\n}\nvoid swap(int *a, int *b)\n{\n    int temp;\n    temp = *a;\n    *a = *b;\n    *b = temp;\n    printf(\"After swapping values in function a = %d, b = %d\\n\", *a, *b); // Formal parameters, a = 20, b = 10\n}\n",
      "topic": "call : Value & Reference"
    },
    {
      "title": "Recursion",
      "exp2": "A function that calls itself is known as a recursive function. And, this technique is known as recursion.",
      "title3": "How recursion works?",
      "code_not_exec4": "void recurse()\n{\n    ... .. ...\n    recurse();\n    ... .. ...\n}\n\nint main()\n{\n    ... .. ...\n    recurse();\n    ... .. ...\n}\n",
      "exp5": "The recursion continues until some condition is met to prevent it.\nTo prevent infinite recursion, if...else statement (or similar approach) can be used where one branch makes the recursive call, and other doesn't.\n\nExample :",
      "code_exec6": "#include <stdio.h>\nint fact(int);\nint main()\n{\n    int n, f;\n    printf(\"Enter the number whose factorial you want to calculate?\");\n    scanf(\"%d\", &n);\n    f = fact(n);\n    printf(\"factorial = %d\", f);\n}\nint fact(int n)\n{\n    if (n == 0)\n    {\n        return 0;\n    }\n    else if (n == 1)\n    {\n        return 1;\n    }\n    else\n    {\n        return n * fact(n - 1);\n    }\n}\n",
      "topic": "recursion"
    },
    {
      "title1": "Storage Class",
      "exp2": "Every variable in C programming has two properties: type and storage class.\nType refers to the data type of a variable. And, storage class determines the scope, visibility and lifetime of a variable.\nThere are 4 types of storage class:\n1. automatic\n2. external\n3. static\n4. register",
      "title3": "Local Variable",
      "exp4": "The variables declared inside a block are automatic or local variables. The local variables exist only inside the block in which it is declared.\n\nExample :",
      "code_exec5": "#include <stdio.h>\nint main(void) {\n  for (int i = 0; i < 5; ++i) {\n     printf(\"C programming\");\n  }\n // Error: i is not declared at this point\n  printf(\"%d\", i);  \n  return 0;\n}\n",
      "title6": "Global Variable",
      "exp7": "Variables that are declared outside of all functions are known as external or global variables.\nThey are accessible from any function inside the program.\n\nExample :",
      "code_exec8": "#include <stdio.h>\nvoid display();\nint n = 5;  // global variable\nint main()\n{\n    ++n;     \n    display();\n    return 0;\n}\n\nvoid display()\n{\n    ++n;   \n    printf(\"n = %d\", n);\n}\n",
      "title9": "Register Variable",
      "exp10": "The register keyword is used to declare register variables. Register variables were supposed to be faster than local variables.\nHowever, modern compilers are very good at code optimization, and there is a rare chance that using register variables will make your program faster.\nUnless you are working on embedded systems where you know how to optimize code for the given application, there is no use of register variables.",
      "title11": "Static Variable",
      "exp12": "A static variable is declared by using the static keyword.\nThe value of a static variable persists until the end of the program.\n\nExample :",
      "code_exec13": "#include <stdio.h>\nvoid display();\nint main()\n{\n    display();\n    display();\n}\nvoid display()\n{\n    static int c = 1;\n    c += 5;\n    printf(\"%d  \",c);\n}\n",
      "topic": "storage class"
    },
    {
      "title1": "Arrays",
      "exp2": "An array is a variable that can store multiple values. For example, if you want to store 100 integers, you can create an array for it.",
      "title3": "How to declare an array?",
      "code_not_exec4": "dataType arrayName[arraySize];\n",
      "exp5": "For example,",
      "code_not_exec6": "float mark[5];\n",
      "exp7": "Here, we declared an array, mark, of floating-point type. And its size is 5. Meaning, it can hold 5 floating-point values.\nIt's important to note that the size and type of an array cannot be changed once it is declared.",
      "title8": "Access Array Elements",
      "exp9": "You can access elements of an array by indices.\nSuppose you declared an array mark as above. The first element is mark[0], the second element is mark[1] and so on.\n\nFew keynotes:\n• Arrays have 0 as the first index, not 1. In this example, mark[0] is the first element.\n• If the size of an array is n, to access the last element, the n-1 index is used. In this example, mark[4]\n• Suppose the starting address of mark[0] is 2120d. Then, the address of the mark[1] will be 2124d. Similarly, the address of mark[2] will be 2128d and so on.\n• This is because the size of a float is 4 bytes.",
      "title10": "How to initialize an array?",
      "exp11": "It is possible to initialize an array during declaration. For example, ",
      "code_not_exec12": "int mark[5] = {19, 10, 8, 17, 9};\n",
      "exp13": "You can also initialize an array like this.",
      "code_not_exec14": "int mark[] = {19, 10, 8, 17, 9};\n",
      "exp15": "Here, we haven't specified the size. However, the compiler knows its size is 5 as we are initializing it with 5 elements.\n\nExample :",
      "code_exec16": "// Program to take 5 values from the user and store them in an array\n// Print the elements stored in the array\n#include <stdio.h>\nint main() {\n  int values[5];\n  printf(\"Enter 5 integers: \");\n  // taking input and storing it in an array\n  for(int i = 0; i < 5; ++i) {\n     scanf(\"%d\", &values[i]);\n  printf(\"Displaying integers: \");\n  // printing elements of an array\n  for(int i = 0; i < 5; ++i) {\n     printf(\"%d\\n\", values[i]);\n  }\n  return 0;\n}\n",
      "topic": "1D-array"
    },
    {
      "title1": "Multidimensional Arrays",
      "exp2": "In C programming, you can create an array of arrays. These arrays are known as multidimensional arrays.\nFor example,",
      "code_not_exec3": "float x[3][4];\n",
      "exp4": "Here, x is a two-dimensional (2d) array. The array can hold 12 elements. You can think the array as a table with 3 rows and each row has 4 columns.",
      "title5": "R.drawable.array",
      "exp6": "Similarly, you can declare a three-dimensional (3d) array. \n\nFor example",
      "code_not_exec7": "float y[2][4][3];\n",
      "exp8": "Here, the array y can hold 24 elements.",
      "title9": "Initialization of a 2d array",
      "code_not_exec10": "// Different ways to initialize two-dimensional array\nint c[2][3] = {{1, 3, 0}, {-1, 5, 9}};\nint c[][3] = {{1, 3, 0}, {-1, 5, 9}};\nint c[2][3] = {1, 3, 0, -1, 5, 9};\n",
      "exp11": "Example :",
      "code_exec12": "#include <stdio.h>\nint main()\n{\n  float a[2][2], b[2][2], result[2][2];\n  // Taking input using nested for loop\n  printf(\"Enter elements of 1st matrix\\n\");\n  for (int i = 0; i < 2; ++i)\n    for (int j = 0; j < 2; ++j)\n    {\n      printf(\"Enter a%d%d: \", i + 1, j + 1);\n      scanf(\"%f\", &a[i][j]);\n    }\n  // Taking input using nested for loop\n  printf(\"Enter elements of 2nd matrix\\n\");\n  for (int i = 0; i < 2; ++i)\n    for (int j = 0; j < 2; ++j)\n    {\n      printf(\"Enter b%d%d: \", i + 1, j + 1);\n      scanf(\"%f\", &b[i][j]);\n    }\n  // adding corresponding elements of two arrays\n  for (int i = 0; i < 2; ++i)\n    for (int j = 0; j < 2; ++j)\n    {\n      result[i][j] = a[i][j] + b[i][j];\n    }\n  // Displaying the sum\n  printf(\"\\nSum Of Matrix:\");\n  for (int i = 0; i < 2; ++i)\n    for (int j = 0; j < 2; ++j)\n    {\n      printf(\"%.1f\\t\", result[i][j]);\n      if (j == 1)\n        printf(\"\\n\");\n    }\n  return 0;\n}\n",
      "topic": "Multidimensional Arrays"
    },
    {
      "title1": "Passing individual array elements to functions",
      "exp2": "Passing array elements to a function is similar to passing variables to a function.\n\nFor example,",
      "code_exec3": "#include <stdio.h>\nvoid display(int age1, int age2)\n{\n    printf(\"%d\\n\", age1);\n    printf(\"%d\\n\", age2);\n}\nint main()\n{\n    int ageArray[] = {2, 8, 4, 12};\n    // Passing second and third elements to display()\n    display(ageArray[1], ageArray[2]); \n    return 0;\n}\n",
      "title4": "Passing arrays to functions",
      "exp5": "For example,",
      "code_exec6": "// Program to calculate the sum of array elements by passing to a function \n#include <stdio.h>\nfloat calculateSum(float age[]);\nint main() {\n    float result, age[] = {23.4, 55, 22.6, 3, 40.5, 18};\n    // age array is passed to calculateSum()\n    result = calculateSum(age); \n    printf(\"Result = %.2f\", result);\n    return 0;\n}\nfloat calculateSum(float age[]) {\n  float sum = 0.0;\n  for (int i = 0; i < 6; ++i) {\n\t\tsum += age[i];\n  }\n  return sum;\n}\n",
      "title7": "Passing Multidimensional Arrays to a Function",
      "exp8": "To pass multidimensional arrays to a function, only the name of the array is passed to the function(similar to one-dimensional arrays).\n\nFor example,",
      "code_exec9": "#include <stdio.h>\nvoid displayNumbers(int num[2][2]);\nint main()\n{\n    int num[2][2];\n    printf(\"Enter 4 numbers:\\n\");\n    for (int i = 0; i < 2; ++i)\n        for (int j = 0; j < 2; ++j)\n            scanf(\"%d\", &num[i][j]);\n    // passing multi-dimensional array to a function\n    displayNumbers(num);\n    return 0;\n}\nvoid displayNumbers(int num[2][2])\n{\n    printf(\"Displaying:\\n\");\n    for (int i = 0; i < 2; ++i) {\n        for (int j = 0; j < 2; ++j) {\n           printf(\"%d\\n\", num[i][j]);\n        }\n    }\n}\n",
      "topic": "arrays & functions"
    },
    {
      "title1": "Pointers",
      "exp2": "Pointers are powerful features of C and C++ programming. Before we learn pointers, let's learn about addresses in C programming.",
      "title3": "Address in C",
      "exp4": "If you have a variable var in your program, &var will give you its address in the memory.\nWe have used address numerous times while using the scanf() function.",
      "code_not_exec5 ": "scanf(\"%d\", &var);\n",
      "exp6": "Here, the value entered by the user is stored in the address of var variable.\n\nExample :",
      "code_exec7": "#include <stdio.h>\nint main()\n{\n  int var = 5;\n  printf(\"var: %d\\n\", var);\n  // Notice the use of & before var\n  printf(\"address of var: %p\", &var);  \n  return 0;\n}\n",
      "title8": "Pointers",
      "exp9": "Pointers (pointer variables) are special variables that are used to store addresses rather than values.\n\nSyntax :",
      "code_not_exec10": "int *p1;\nint * p2;\n",
      "exp11": "Example :",
      "code_exec12": "#include <stdio.h>\nint main()\n{\n   int* pc, c;\n   c = 22;\n   printf(\"Address of c: %p\\n\", &c);\n   printf(\"Value of c: %d\\n\\n\", c);  // 22\n   pc = &c;\n   printf(\"Address of pointer pc: %p\\n\", pc);\n   printf(\"Content of pointer pc: %d\\n\\n\", *pc); // 22\n   c = 11;\n   printf(\"Address of pointer pc: %p\\n\", pc);\n   printf(\"Content of pointer pc: %d\\n\\n\", *pc); // 11\n   *pc = 2;\n   printf(\"Address of c: %p\\n\", &c);\n   printf(\"Value of c: %d\\n\\n\", c); // 2\n   return 0;\n}\n",
      "title13": "Common mistakes when working with pointers",
      "code_not_exec14": "int c, *pc;\n\n// pc is address but c is not\npc = c; // Error\n\n// &c is address but *pc is not\n*pc = &c; // Error\n\n// both &c and pc are addresses\npc = &c;\n\n// both c and *pc values \n*pc = c;\n",
      "topic": "Pointers"
    },
    {
      "title1": "Relationship Between Arrays and Pointers",
      "exp2": "An array is a block of sequential data.\nLet's write a program to print addresses of array elements.",
      "exp3": "There is a difference of 4 bytes between two consecutive elements of array x. It is because the size of int is 4 bytes (on our compiler).\nNotice that, the address of &x[0] and x is the same. It's because the variable name x points to the first element of the array.\n\nExample :",
      "code_exec4": "#include <stdio.h>\nint main() {\n  int i, x[6], sum = 0;\n  printf(\"Enter 6 numbers: \");\n  for(i = 0; i < 6; ++i) {\n  // Equivalent to scanf(\"%d\", &x[i]);\n      scanf(\"%d\", x+i);\n  // Equivalent to sum += x[i]\n      sum += *(x+i);\n  }\n  printf(\"Sum = %d\", sum);\n  return 0;\n}\n",
      "topic": "Pointers and Arrays"
    },
    {
      "title1": "Call by Reference: Using pointers",
      "exp2": "In C programming, it is also possible to pass addresses as arguments to functions.\nTo accept these addresses in the function definition, we can use pointers. It's because pointers are used to store addresses. \n\nExample 1:Call by reference",
      "code_exec3": "#include <stdio.h>\nvoid swap(int *n1, int *n2);\nint main()\n{\n    int num1 = 5, num2 = 10;\n    // address of num1 and num2 is passed\n    swap( &num1, &num2);\n    printf(\"num1 = %d\\n\", num1);\n    printf(\"num2 = %d\", num2);\n    return 0;\n}\nvoid swap(int* n1, int* n2)\n{\n    int temp;\n    temp = *n1;\n    *n1 = *n2;\n    *n2 = temp;\n}\n",
      "exp4": "Example 2: Passing Pointers to Functions",
      "code_exec5": "#include <stdio.h>\nvoid addOne(int* ptr) {\n  (*ptr)++; // adding 1 to *ptr\n}\nint main()\n{\n  int* p, i = 10;\n  p = &i;\n  addOne(p);\n  printf(\"%d\", *p); // 11\n  return 0;\n}\n",
      "topic": "Pointers and Functions"
    },
    {
      "title1": "Call by Reference: Using pointers",
      "exp2": "In C programming, it is also possible to pass addresses as arguments to functions.\nTo accept these addresses in the function definition, we can use pointers. It's because pointers are used to store addresses. \n\nExample 1:Call by reference",
      "code_exec3": "#include <stdio.h>\nvoid swap(int *n1, int *n2);\nint main()\n{\n    int num1 = 5, num2 = 10;\n    // address of num1 and num2 is passed\n    swap( &num1, &num2);\n    printf(\"num1 = %d\\n\", num1);\n    printf(\"num2 = %d\", num2);\n    return 0;\n}\nvoid swap(int* n1, int* n2)\n{\n    int temp;\n    temp = *n1;\n    *n1 = *n2;\n    *n2 = temp;\n}\n",
      "exp4": "Example 2: Passing Pointers to Functions",
      "code_exec5": "#include <stdio.h>\nvoid addOne(int* ptr) {\n  (*ptr)++; // adding 1 to *ptr\n}\nint main()\n{\n  int* p, i = 10;\n  p = &i;\n  addOne(p);\n  printf(\"%d\", *p); // 11\n  return 0;\n}\n",
      "topic": "Pointers and Functions"
    },
    {
      "title1": "Dynamic Memory Allocation",
      "exp2": "To allocate memory dynamically, library functions are malloc(), calloc(), realloc() and free() are used. These functions are defined in the <stdlib.h> header file.",
      "title3": "malloc()",
      "exp4": "The name \"malloc\" stands for memory allocation.\nThe malloc() function reserves a block of memory of the specified number of bytes. And, it returns a pointer of void which can be casted into pointers of any form.\n\nExample :",
      "code_not_exec5": "ptr = (float*) malloc(100 * sizeof(float));\n",
      "title6": "calloc()",
      "exp7": "The name \"calloc\" stands for contiguous allocation.\nThe malloc() function allocates memory and leaves the memory uninitialized. Whereas, the calloc() function allocates memory and initializes all bits to zero.\n\nExample :",
      "code_not_exec8": "ptr = (float*) calloc(25, sizeof(float));\n",
      "title9": "free()",
      "exp10": "Dynamically allocated memory created with either calloc() or malloc() doesn't get freed on their own. You must explicitly use free() to release the space.\n\nSyntax :",
      "code_not_exec11": "free(ptr);\n",
      "exp12": "Example 1:",
      "code_exec13": "// Program to calculate the sum of n numbers entered by the user\n#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n, i, *ptr, sum = 0;\n    printf(\"Enter number of elements: \");\n    scanf(\"%d\", &n);\n    ptr = (int*) malloc(n * sizeof(int));\n    // if memory cannot be allocated\n    if(ptr == NULL)                     \n    {\n        printf(\"Error! memory not allocated.\");\n        exit(0);\n    }\n    printf(\"Enter elements: \");\n    for(i = 0; i < n; ++i)\n    {\n        scanf(\"%d\", ptr + i);\n        sum += *(ptr + i);\n    }\n    printf(\"Sum = %d\", sum);\n    // deallocating the memory\n    free(ptr);\n\n    return 0;\n}\n",
      "exp14": "Example 2:",
      "code_exec15": "// Program to calculate the sum of n numbers entered by the user\n#include <stdio.h>\n#include <stdlib.h>\nint main()\n{\n    int n, i, *ptr, sum = 0;\n    printf(\"Enter number of elements: \");\n    scanf(\"%d\", &n);\n    ptr = (int*) calloc(n, sizeof(int));\n    if(ptr == NULL)\n    {\n        printf(\"Error! memory not allocated.\");\n        exit(0);\n    }\n    printf(\"Enter elements: \");\n    for(i = 0; i < n; ++i)\n    {\n        scanf(\"%d\", ptr + i);\n        sum += *(ptr + i);\n    }\n    printf(\"Sum = %d\", sum);\n    free(ptr);\n    return 0;\n}\n",
      "topic": "Dynamic Memory Allocation"
    },
    {
      "title1": "Strings",
      "exp2": "In C programming, a string is a sequence of characters terminated with a null character \\0.\nWhen the compiler encounters a sequence of characters enclosed in the double quotation marks, it appends a null character \\0 at the end by default.\n\nSyntax :",
      "code_not_exec3": "char s[5];\n",
      "title4": "How to initialize strings?",
      "exp5": "You can initialize strings in a number of ways.",
      "code_not_exec6": "char c[] = \"abcd\";\nchar c[50] = \"abcd\";\nchar c[] = {'a', 'b', 'c', 'd', '\\0'};\nchar c[5] = {'a', 'b', 'c', 'd', '\\0'};\n",
      "exp7": "Example :",
      "code_exec8": "#include<stdio.h>  \n#include <string.h>    \nint main(){    \n  char ch[11]={'H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd', '\\0'};    \n  char ch2[11]=\"HelloWorld\";    \n   printf(\"Char Array Value is: %s\\n\", ch);    \n   printf(\"String Literal Value is: %s\\n\", ch2);    \n return 0;    \n}    \n",
      "title9": "How to read a line of text?",
      "exp10": "You can use the fgets() function to read a line of string. And, you can use puts() to display the string.\n\nExample :",
      "code_exec11": "#include <stdio.h>\nint main()\n{\n    char name[30];\n    printf(\"Enter name: \");\n    fgets(name, sizeof(name), stdin);  // read string\n    printf(\"Name: \");\n    puts(name);    // display string\n    return 0;\n}\n",
      "topic": "strings"
    },
    {
      "title1": "gets() and puts() functions",
      "exp2": "The gets() and puts() are declared in the header file stdio.h. Both the functions are involved in the input/output operations of the strings.",
      "title2": "gets() function",
      "exp3": "The gets() function enables the user to enter some characters followed by the enter key. All the characters entered by the user get stored in a character array. The null character is added to the array to make it a string. The gets() allows the user to enter the space-separated strings. It returns the string entered by the user.\n\nExample :",
      "code_exec5": "#include<stdio.h>  \nvoid main ()  \n{  \n    char s[30];  \n    printf(\"Enter the string? \");  \n    gets(s);  \n    printf(\"You entered %s\",s);  \n}  \n",
      "title6": "puts() function",
      "exp7": "The puts() function is very much similar to printf() function. The puts() function is used to print the string on the console which is previously read by using gets() or scanf() function. The puts() function returns an integer value representing the number of characters being printed on the console.\n\nExample :",
      "code_exec8": "#include<stdio.h>\n#include <string.h>\nint main() {\n  char name[50];\n  printf(\"Enter your name: \");\n  gets(name); //reads string from user    \n  printf(\"Your name is: \");\n  puts(name); //displays string    \n  return 0;\n}\n",
      "topic": "gets() and puts() functions"
    },
    {
      "title1": "String Functions",
      "exp2": "There are many important string functions defined in \"string.h\" library.",
      "title3": "strlen()",
      "exp4": "The strlen() function calculates the length of a given string.\nThe strlen() function takes a string as an argument and returns its length. The returned value is of type long int.\n\nExample :",
      "code_exec5": "#include <stdio.h>\n#include <string.h>\nint main()\n{\n    char a[20]=\"Program\";\n    char b[20]={'P','r','o','g','r','a','m','\\0'};\n    printf(\"Length of string a = %ld \\n\",strlen(a));\n    printf(\"Length of string b = %ld \\n\",strlen(b));\n    return 0;\n}\n",
      "title6": "strcpy()",
      "exp7": "The strcpy() function copies the string to the another character array.\nThe strcpy() function copies the string pointed by source (including the null character) to the character array destination.\n\nExample :",
      "code_exec8": "#include <stdio.h>\n#include <string.h>\nint main()\n{\n    char str1[10]= \"awesome\";\n    char str2[10];\n    char str3[10];\n    strcpy(str2, str1);\n    strcpy(str3, \"well\");\n    puts(str2);\n    puts(str3);\n    return 0;\n}\n",
      "title9": "strcat()",
      "exp10": "The function strcat() concatenates two strings.\nIt takes two arguments, i.e, two strings or character arrays, and stores the resultant concatenated string in the first string specified in the argument.\n\nExample :",
      "code_exec11": "#include <stdio.h>\n#include <string.h>\nint main()\n{\n    char str1[] = \"This is \", str2[] = \"simplekoder\";\n    //concatenates str1 and str2 and resultant string is stored in str1.\n    strcat(str1,str2);\n    puts(str1);    \n    puts(str2); \n    return 0;\n}\n",
      "title12": "strcmp()",
      "exp13": "The strcmp() function compares two strings and returns 0 if both strings are identical.\nThe strcmp() function takes two strings and returns an integer.\n\nExample :",
      "code_exec14": "#include <stdio.h>\n#include <string.h>\nint main()\n{\n    char str1[] = \"abcd\", str2[] = \"abCd\", str3[] = \"abcd\";\n    int result;\n    // comparing strings str1 and str2\n    result = strcmp(str1, str2);\n    printf(\"strcmp(str1, str2) = %d\\n\", result);\n    // comparing strings str1 and str3\n    result = strcmp(str1, str3);\n    printf(\"strcmp(str1, str3) = %d\\n\", result);\n    return 0;\n}\n",
      "title15": "strlwr()",
      "exp16": "The strlwr(string) function returns string characters in lowercase.\n\nExample :",
      "code_exec17": "#include<stdio.h>  \n#include <string.h>    \nint main(){    \n  char str[20];    \n  printf(\"Enter string: \");    \n  gets(str);//reads string from console    \n  printf(\"String is: %s\",str);    \n  printf(\"\\nLower String is: %s\",strlwr(str));    \n return 0;    \n}    \n",
      "title18": "strupr()",
      "exp19": "The strupr(string) function returns string characters in uppercase.\n\nExample :",
      "code_exec20": "#include<stdio.h>  \n#include <string.h>    \nint main(){    \n  char str[20];    \n  printf(\"Enter string: \");    \n  gets(str);//reads string from console    \n  printf(\"String is: %s\",str);    \n  printf(\"\\nUpper String is: %s\",strupr(str));    \n return 0;    \n}    \n",
      "topic": "string Functions"
    },
    {
      "title1": "struct",
      "exp2": "In C programming, a struct (or structure) is a collection of variables (can be of different types) under a single name.",
      "title3": "How to define structures?",
      "exp4": "Before you can create structure variables, you need to define its data type. To define a struct, the struct keyword is used.\n\nSyntax :",
      "code_not_exec5": "struct structureName \n{\n    dataType member1;\n    dataType member2;\n    ...\n};\n",
      "exp6": "Example :",
      "code_not_exec7": "struct Person\n{\n    char name[50];\n    int citNo;\n    float salary;\n};\n",
      "title8": "Declaring structure variable",
      "exp9": "We can declare a variable for the structure so that we can access the member of the structure easily. There are two ways to declare structure variable:\n\n1. By struct keyword within main() function\n2. By declaring a variable at the time of defining the structure.\n\nExample 1:",
      "code_not_exec10": "struct employee  \n{   int id;  \n    char name[50];  \n    float salary;  \n};  \n",
      "exp11": "Example 2:",
      "code_not_exec12": "struct employee  \n{   int id;  \n    char name[50];  \n    float salary;  \n}e1,e2;  \n",
      "title13": "Access members of a structure",
      "exp14": "There are two types of operators used for accessing members of a structure.\n\n1 . - Member operator\n2 -> - Structure pointer operator (will be discussed in the next tutorial)\nSuppose, you want to access the salary of person2. Here's how you can do it.\n\nExample :",
      "code_not_exec15": "#include<stdio.h>  \n#include <string.h>    \nstruct employee      \n{   int id;      \n    char name[50];      \n}e1;  //declaring e1 variable for structure    \nint main( )    \n{    \n   //store first employee information    \n   e1.id=101;    \n   strcpy(e1.name, \"Sonoo Jaiswal\");//copying string into char array    \n   //printing first employee information    \n   printf( \"employee 1 id : %d\\n\", e1.id);    \n   printf( \"employee 1 name : %s\\n\", e1.name);    \nreturn 0;  \n}    \n",
      "topic": "struct"
    },
    {
      "title1": "Keyword typedef",
      "exp2": "We use the typedef keyword to create an alias name for data types. It is commonly used with structures to simplify the syntax of declaring variables.\n\nthis code",
      "code_not_exec3": "struct Distance{\n    int feet;\n    float inch;\n};\n\nint main() {\n    structure Distance d1, d2;\n}\n",
      "exp4": "is equivalent to",
      "code_not_exec5": "typedef struct Distance{\n    int feet;\n    float inch;\n} distances;\n\nint main() {\n    distances d1, d2;\n}\n",
      "topic": "typedef"
    },
    {
      "title1": "Structure and Function in C",
      "exp2": "Similar to variables of built-in types, you can also pass structure variables to a function.\n\nExample :",
      "code_exec3": "#include <stdio.h>\nstruct student\n{\n    char name[50];\n    int age;\n};\n\n// function prototype\nvoid display(struct student s);\n\nint main()\n{\n    struct student s1;\n\n    printf(\"Enter name: \");\n    scanf(\"%[^\\n]%*c\", s1.name);\n\n    printf(\"Enter age: \");\n    scanf(\"%d\", &s1.age);\n    \n    display(s1);   // passing struct as an argument\n    \n    return 0;\n}\nvoid display(struct student s) \n{\n  printf(\"\\nDisplaying information\\n\");\n  printf(\"Name: %s\", s.name);\n  printf(\"\\nAge: %d\", s.age);\n}\n",
      "topic": "struct & functions"
    },
    {
      "title1": "Unions in C",
      "exp2": "A union is a special data type available in C that allows to store different data types in the same memory location. You can define a union with many members, but only one member can contain a value at any given time.",
      "title3": "How to define a union?",
      "exp4": "We use the union keyword to define unions.\n\nSyntax :",
      "code_not_exec5": "union car\n{\n  char name[50];\n  int price;\n};\n",
      "title6": "Create union variables",
      "exp7": "When a union is defined, it creates a user-defined type. However, no memory is allocated. To allocate memory for a given union type and work with it, we need to create variables.\n\nExample :",
      "code_not_exec8": "union car\n{\n  char name[50];\n  int price;\n};\n\nint main()\n{\n  union car car1, car2, *car3;\n  return 0;\n}\n",
      "title9": "Difference between unions and structures",
      "exp10": "Example :",
      "code_exec11": "#include <stdio.h>\nunion unionJob\n{\n   //defining a union\n   char name[32];\n   float salary;\n   int workerNo;\n} uJob;\n\nstruct structJob\n{\n   char name[32];\n   float salary;\n   int workerNo;\n} sJob;\n\nint main()\n{\n   printf(\"size of union = %d bytes\", sizeof(uJob));\n   printf(\"\\nsize of structure = %d bytes\", sizeof(sJob));\n   return 0;\n}\n",
      "topic": "unions"
    },
    {
      "title1": "File Handling in C",
      "exp2": "File handling in C enables us to create, update, read, and delete the files stored on the local file system through our C program. The following operations can be performed on a file.\n\n• Creation of the new file\n• Opening an existing file\n• Reading from the file\n• Writing to the file",
      "title3": "Reading and writing to a text file",
      "exp4": "For reading and writing to a text file, we use the functions fprintf() and fscanf().\nThey are just the file versions of printf() and scanf().\n\nExample 1:\nWrite to a text file",
      "code_not_exec5": "#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n   int num;\n   FILE *fptr;\n\n   // use appropriate location if you are using MacOS or Linux\n   fptr = fopen(\"C:\\\\program.txt\",\"w\");\n\n   if(fptr == NULL)\n   {\n      printf(\"Error!\");   \n      exit(1);             \n   }\n\n   printf(\"Enter num: \");\n   scanf(\"%d\",&num);\n\n   fprintf(fptr,\"%d\",num);\n   fclose(fptr);\n\n   return 0;\n}\n",
      "exp6": "Example 2:\nRead from a text file",
      "code_not_exec7": "#include <stdio.h>\n#include <stdlib.h>\n\nint main()\n{\n   int num;\n   FILE *fptr;\n\n   if ((fptr = fopen(\"C:\\\\program.txt\",\"r\")) == NULL){\n       printf(\"Error! opening file\");\n\n       // Program exits if the file pointer returns NULL.\n       exit(1);\n   }\n\n   fscanf(fptr,\"%d\", &num);\n\n   printf(\"Value of n=%d\", num);\n   fclose(fptr); \n  \n   return 0;\n}\n",
      "topic": "File Handling"
    }
  ],
  "Cpp": [
    {
      "title1": "C++ Syntax",
      "exp2": "Example :",
      "code_exec3": "#include <iostream.h>  \n#include<conio.h>  \nvoid main() {  \n   clrscr();  \n   cout << \"Welcome to C++ Programming.\";   \n   getch();  \n}  \n",
      "exp4": "#include<iostream.h> includes the standard input output library functions. It provides cin and cout methods for reading from input and writing to output respectively.\n\n#include <conio.h> includes the console input output library functions. The getch() function is defined in conio.h file.\n\nvoid main() The main() function is the entry point of every program in C++ language. The void keyword specifies that it returns no value.\n\ncout << \"Welcome to C++ Programming.\" is used to print the data \"Welcome to C++ Programming.\" on the console.\n\ngetch() The getch() function asks for a single character. Until you press any key, it blocks the screen.",
      "topic": "Syntax"
    },
    {
      "title1": "C++ Comments",
      "exp2": "Comments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Comments can be singled-lined or multi-lined.",
      "title3": "Single-line comments",
      "exp4": "Any text between // and the end of the line is ignored by the compiler (will not be executed).\n\nExample :",
      "code_not_exec5": "// This is a comment\ncout << \"Hello World!\";\n",
      "title6": "Multi-line Comments",
      "exp7": "Multi-line comments start with /* and ends with */.\nAny text between /* and */ will be ignored by the compiler:\n\nExample :",
      "code_not_exec8": "/* The code below will print the words Hello World!\nto the screen, and it is amazing */\ncout << \"Hello World!\";\n",
      "topic": "Comments"
    },
    {
      "title1": "C++ Comments",
      "exp2": "Comments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution when testing alternative code. Comments can be singled-lined or multi-lined.",
      "title3": "Single-line comments",
      "exp4": "Any text between // and the end of the line is ignored by the compiler (will not be executed).\n\nExample :",
      "code_not_exec5": "// This is a comment\ncout << \"Hello World!\";\n",
      "title6": "Multi-line Comments",
      "exp7": "Multi-line comments start with /* and ends with */.\nAny text between /* and */ will be ignored by the compiler:\n\nExample :",
      "code_not_exec8": "/* The code below will print the words Hello World!\nto the screen, and it is amazing */\ncout << \"Hello World!\";\n",
      "topic": "Variables"
    },
    {
      "title1": "C++ Output",
      "exp2": "The cout object, together with the << operator, is used to output values/print text:\n\nExample :",
      "code_exec3": "#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}\n",
      "exp4": "You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:\n\nExample :",
      "code_exec5": "#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello World!\";\n  cout << \"I am learning C++\";\n  return 0;\n}\n",
      "title6": "New Lines",
      "exp7": "To insert a new line, you can use the \\n character:\n\nExample :",
      "code_exec8": "#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello World! \\n\\n\";\n  cout << \"I am learning C++\";\n  return 0;\n}\n",
      "exp9": "Another way to insert a new line, is with the endl manipulator:\n\nExample :",
      "code_exec10": "#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello World!\" << endl;\n  cout << \"I am learning C++\";\n  return 0;\n}\n",
      "topic": "Output"
    },
    {
      "title1": "C++ Output",
      "exp2": "The cout object, together with the << operator, is used to output values/print text:\n\nExample :",
      "code_exec3": "#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello World!\";\n  return 0;\n}\n",
      "exp4": "You can add as many cout objects as you want. However, note that it does not insert a new line at the end of the output:\n\nExample :",
      "code_exec5": "#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello World!\";\n  cout << \"I am learning C++\";\n  return 0;\n}\n",
      "title6": "New Lines",
      "exp7": "To insert a new line, you can use the \\n character:\n\nExample :",
      "code_exec8": "#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello World! \\n\\n\";\n  cout << \"I am learning C++\";\n  return 0;\n}\n",
      "exp9": "Another way to insert a new line, is with the endl manipulator:\n\nExample :",
      "code_exec10": "#include <iostream>\nusing namespace std;\n\nint main() {\n  cout << \"Hello World!\" << endl;\n  cout << \"I am learning C++\";\n  return 0;\n}\n",
      "topic": "User Input"
    },
    {
      "title1": "If-else Statement",
      "exp2": "In C++ programming, if statement is used to test the condition. There are various types of if statements in C++.\n\n• if statement\n• if-else statement\n• nested if statement\n• if-else-if ladder",
      "title3": "if Statement ",
      "exp4": "The C++ if statement tests the condition. It is executed if condition is true.\n\nSyntax :",
      "code_not_exec5": "if (condition) {\n //code to be executed    \n}\n",
      "exp6": "Example :",
      "code_exec7": "#include <iostream>\nusing namespace std;\n\nint main() {\n  if (20 > 18) {\n    cout << \"20 is greater than 18\";\n  }  \n  return 0;\n}\n",
      "title8": "if-else Statement",
      "exp9": "The C++ if-else statement also tests the condition. It executes if block if condition is true otherwise else block is executed.\n\nSyntax :",
      "code_not_exec10": "if(condition){    \n//code if condition is true    \n}else{    \n//code if condition is false    \n}    \n",
      "exp11": "Example :",
      "code_exec12": "#include <iostream>\n\nusing namespace std;\nint main() {\n int num;\n cout << \"Enter a Number: \";\n cin >> num;\n if (num % 2 == 0) {\n  cout << \"It is even number\" << endl;\n } else {\n  cout << \"It is odd number\" << endl;\n }\n return 0;\n}\n",
      "title13": "Nested if-else Statement",
      "exp14": "The nested if...else statement allows you to check for multiple test expressions and execute different codes for more than two conditions.\n\nSyntax :",
      "code_not_exec15": "if (testExpression1) \n{\n   // statements to be executed if testExpression1 is true\n}\nelse if(testExpression2) \n{\n   // statements to be executed if testExpression1 is false and testExpression2 is true\n}\nelse if (testExpression 3) \n{\n   // statements to be executed if testExpression1 and testExpression2 is false and testExpression3 is true\n}\n.\n.\nelse \n{\n   // statements to be executed if all test expressions are false\n}\n",
      "exp16": "Example :",
      "code_exec17": "// Program to check whether an integer is positive, negative or zero\n\n#include <iostream>\nusing namespace std;\n\nint main() \n{\n    int number;\n    cout << \"Enter an integer: \";\n    cin >> number;\n\n    if ( number > 0)\n    {\n        cout << \"You entered a positive integer: \" << number << endl;\n    }\n    else if (number < 0)\n    {\n        cout<<\"You entered a negative integer: \" << number << endl;\n    }\n    else\n    {\n        cout << \"You entered 0.\" << endl;\n    }\n\n    cout << \"This line is always printed.\";\n    return 0;\n}\n",
      "title18": "if-else-if ladder Statement",
      "exp19": "The C++ if-else-if ladder statement executes one condition from multiple statements.\n\nSyntax :",
      "code_not_exec20": "if (condition1) {\n  // block of code to be executed if condition1 is true\n} else if (condition2) {\n  // block of code to be executed if the condition1 is false and condition2 is true\n} else {\n  // block of code to be executed if the condition1 is false and condition2 is false\n}\n",
      "exp21": "Example :",
      "code_exec22": "#include <iostream>\n\nusing namespace std;\nint main() {\n int num;\n cout << \"Enter a number to check grade:\";\n cin >> num;\n if (num < 0 || num > 100) {\n  cout << \"wrong number\";\n } else if (num >= 0 && num < 50) {\n  cout << \"Fail\";\n } else if (num >= 50 && num < 60) {\n  cout << \"D Grade\";\n } else if (num >= 60 && num < 70) {\n  cout << \"C Grade\";\n } else if (num >= 70 && num < 80) {\n  cout << \"B Grade\";\n } else if (num >= 80 && num < 90) {\n  cout << \"A Grade\";\n } else if (num >= 90 && num <= 100) {\n  cout << \"A+ Grade\";\n }\n}\n",
      "topic": "if-else"
    },
    {
      "title1": "switch Statement",
      "exp2": "The C++ switch statement executes one statement from multiple conditions. It is like if-else-if ladder statement in C++.\n\nSyntax :",
      "code_not_exec3": "switch(expression) {\n  case x:\n    // code block\n    break;\n  case y:\n    // code block\n    break;\n  default:\n    // code block\n}\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int day = 4;\n  switch (day) {\n  case 1:\n    cout << \"Monday\";\n    break;\n  case 2:\n    cout << \"Tuesday\";\n    break;\n  case 3:\n    cout << \"Wednesday\";\n    break;\n  case 4:\n    cout << \"Thursday\";\n    break;\n  case 5:\n    cout << \"Friday\";\n    break;\n  case 6:\n    cout << \"Saturday\";\n   break;\n  case 7:\n    cout << \"Sunday\";\n    break;\n  }\n  return 0;\n}\n",
      "topic": "switch"
    },
    {
      "title1": "for Loop",
      "exp2": "The C++ for loop is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop than while or do-while loops.\n\nSyntax :",
      "code_not_exec3": "for (statement 1; statement 2; statement 3) \n{\n  // code block to be executed\n}\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\nusing namespace std;\n\nint main() {\n  for (int i = 0; i < 5; i++) {\n    cout << i << \"\\n\";\n  }\n  return 0;\n}\n",
      "topic": "for Loop"
    },
    {
      "title1": "do-while Loop",
      "exp2": "The do/while loop is a variant of the while loop. This loop will execute the code block once, before checking if the condition is true, then it will repeat the loop as long as the condition is true.\n\nSyntax :",
      "code_not_exec3": "do {\n  // code block to be executed\n}\nwhile (condition);\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\nusing namespace std;\n\nint main() {\n  int i = 0;\n  do {\n    cout << i << \"\\n\";\n    i++;\n  }\n  while (i < 5);\n  return 0;\n}\n",
      "topic": "do-while Loop"
    },
    {
      "title1": "break Statement",
      "exp2": "break is used to break loop or switch statement. It breaks the current flow of the program at the given condition. In case of inner loop, it breaks only inner loop.\n\nSyntax :",
      "code_not_exec3": "break;\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\nusing namespace std;\n\nint main() {\n  for (int i = 0; i < 10; i++) {\n    if (i == 4) {\n      break;\n    }\n    cout << i << \"\\n\";\n  } \n  return 0;\n}\n",
      "topic": "break"
    },
    {
      "title1": "continue Statement",
      "exp2": "It is sometimes necessary to skip a certain test condition within a loop. In such case, continue; statement is used in C++ programming.\n\nSyntax :",
      "code_not_exec3": "continue;\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\nusing namespace std;\n\nint main() {\n  for (int i = 0; i < 10; i++) {\n    if (i == 4) {\n      continue;\n    }\n    cout << i << \"\\n\";\n  }   \n  return 0;\n}\n",
      "topic": "continue"
    },
    {
      "title1": "goto Statement",
      "exp2": "The C++ goto statement is also known as jump statement. It is used to transfer control to the other part of the program. It unconditionally jumps to the specified label.\n\nSyntax :",
      "code_not_exec3": "goto label;\n... .. ...\n... .. ...\n... .. ...\nlabel: \nstatement;\n... .. ...\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\n\nusing namespace std;\nint main() {\n ineligible: cout << \"You are not eligible to vote!\\n\";\n cout << \"Enter your age:\\n\";\n int age;\n cin >> age;\n if (age < 18) {\n  goto ineligible;\n } else {\n  cout << \"You are eligible to vote!\";\n }\n}\n",
      "topic": "goto"
    },
    {
      "title1": "Functions",
      "exp2": "A function is a block of code which only runs when it is called.\n\nYou can pass data, known as parameters, into a function.\n\nFunctions are used to perform certain actions, and they are important for reusing code: Define the code once, and use it many times.\n\nThere are two types of functions in C programming:\n\n1. Library Functions\n2. User-defined functions",
      "title3": "Library Function",
      "exp4": "Library functions are the built-in function in C++ programming.\n\nProgrammer can use library function by invoking function directly; they don't need to write it themselves.\n\nExample :",
      "code_exec5": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main()\n{\n    double number, squareRoot;\n    cout << \"Enter a number: \";\n    cin >> number;\n\n    // sqrt() is a library function to calculate square root\n    squareRoot = sqrt(number);\n    cout << \"Square root of \" << number << \" = \" << squareRoot;\n    return 0;\n}\n",
      "title6": "User-defined Function",
      "exp7": "C++ allows programmer to define their own function.\n\nA user-defined function groups code to perform a specific task and that group of code is given a name(identifier).\n\nWhen the function is invoked from any part of program, it all executes the codes defined in the body of function.\n\nExample :",
      "code_exec8": "#include <iostream>\nusing namespace std;\n\nvoid myFunction() {\n  cout << \"I just got executed!\";\n}\n\nint main() {\n  myFunction();\n  return 0;\n}\n",
      "title9": "Function Declaration and Definition",
      "exp10": "A C++ function consist of two parts:\n\n• Declaration: the function's name, return type, and parameters (if any)\n• Definition: the body of the function (code to be executed)\n\nSyntax :",
      "code_not_exec11": "void myFunction() { // declaration\n  // the body of the function (definition)\n}\n",
      "exp12": "Example :",
      "code_exec13": "#include <iostream>\nusing namespace std;\n\n// Function declaration\nvoid myFunction();\n\n// The main method\nint main() {\n  myFunction();  // call the function\n  return 0;\n}\n\n// Function definition\nvoid myFunction() {\n  cout << \"I just got executed!\";\n}\n",
      "topic": "Functions"
    },
    {
      "title1": "Parameters and Arguments",
      "exp2": "Information can be passed to functions as a parameter. Parameters act as variables inside the function.\n\nParameters are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma:\n\nSyntax :",
      "code_not_exec3": "void functionName(parameter1, parameter2, parameter3) {\n  // code to be executed\n}\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\n#include <string>\nusing namespace std;\n\nvoid myFunction(string fname) {\n  cout << fname << \" Refsnes\\n\";\n}\n\nint main() {\n  myFunction(\"Liam\");\n  myFunction(\"Jenny\");\n  myFunction(\"Anja\");\n  return 0;\n}\n",
      "topic": "Parameters/Arguments"
    },
    {
      "title1": "Default Parameter Value",
      "exp2": "You can also use a default parameter value, by using the equals sign (=).\n\nSyntax :",
      "code_exec3": "#include <iostream>\n#include <string>\nusing namespace std;\n\nvoid myFunction(string country = \"Norway\") {\n  cout << country << \"\\n\";\n}\n\nint main() {\n  myFunction(\"Sweden\");\n  myFunction(\"India\");\n  myFunction();\n  myFunction(\"USA\");\n  return 0;\n}\n",
      "topic": "Default Parameters"
    },
    {
      "title1": "Multiple Parameters",
      "exp2": "Inside the function, you can add as many parameters as you want:\n\nExample :",
      "code_exec3": "#include <iostream>\n#include <string>\nusing namespace std;\n\nvoid myFunction(string fname, int age) {\n  cout << fname << \" Refsnes. \" << age << \" years old. \\n\";\n}\n\nint main() {\n  myFunction(\"Liam\", 3);\n  myFunction(\"Jenny\", 14);\n  myFunction(\"Anja\", 30);\n  return 0;\n}\n",
      "topic": "Multiple Parameters"
    },
    {
      "title1": "Return Values",
      "exp2": "The void keyword, used in the previous examples, indicates that the function should not return a value. If you want the function to return a value, you can use a data type (such as int, string, etc.) instead of void, and use the return keyword inside the function:\n\nExample :",
      "code_exec3": "#include <iostream>\nusing namespace std;\n\nint myFunction(int x) {\n  return 5 + x;\n}\n\nint main() {\n  cout << myFunction(3);\n  return 0;\n}\n\n",
      "topic": "Return Values"
    },
    {
      "title1": "Pass By Reference",
      "exp2": "In the examples from the previous page, we used normal variables when we passed parameters to a function. You can also pass a reference to the function. This can be useful when you need to change the value of the arguments:\n\nExample :",
      "code_exec3": "#include <iostream>\nusing namespace std;\n\nvoid swapNums(int &x, int &y) {\n  int z = x;\n  x = y;\n  y = z;\n}\n\nint main() {\n  int firstNum = 10;\n  int secondNum = 20;\n\n  cout << \"Before swap: \" << \"\\n\";\n  cout << firstNum << secondNum << \"\\n\";\n\n  swapNums(firstNum, secondNum);\n\n  cout << \"After swap: \" << \"\\n\";\n  cout << firstNum << secondNum << \"\\n\";\n\n  return 0;\n}\n",
      "topic": "Pass By Reference"
    },
    {
      "title1": "Function Overloading",
      "exp2": "Two or more functions having same name but different argument(s) are known as overloaded functions. In this article, you will learn about function overloading with examples.These functions having different number or type (or both) of parameters are known as overloaded functions.\n\nExample :",
      "code_not_exec3": "int test() { }\nint test(int a) { }\nfloat test(double a) { }\nint test(int a, double b) { }\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\nusing namespace std;\n\nint plusFuncInt(int x, int y) {\n  return x + y;\n}\n\ndouble plusFuncDouble(double x, double y) {\n  return x + y;\n}\n\nint main() {\n  int myNum1 = plusFuncInt(8, 5);\n  double myNum2 = plusFuncDouble(4.3, 6.26);\n  cout << \"Int: \" << myNum1 << \"\\n\";\n  cout << \"Double: \" << myNum2;\n  return 0;\n}\n",
      "topic": "Function Overloading"
    },
    {
      "title1": "C++ Recursion",
      "exp2": "A function that calls itself is known as recursive function. And, this technique is known as recursion.\n\nSyntax :",
      "code_not_exec3": "void recurse()\n{\n    ... .. ...\n    recurse();\n    ... .. ...\n}\n\nint main()\n{\n    ... .. ...\n    recurse();\n    ... .. ...\n}\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\n\nusing namespace std;\n\nint factorial(int);\n\nint main() {\n  int n = 5;\n  cout << \"Factorial of \" << n << \" = \" << factorial(n);\n  return 0;\n}\n\nint factorial(int n) {\n  if (n > 1) {\n    return n * factorial(n - 1);\n  } else {\n    return 1;\n  }\n}\n",
      "topic": "Recursion"
    },
    {
      "title1": "Arrays",
      "exp2": "Like other programming languages, array in C++ is a group of similar types of elements that have contiguous memory location.\n\nIn C++ std::array is a container that encapsulates fixed size arrays. In C++, array index starts from 0. We can store only fixed set of elements in C++ array.",
      "title3": "Array Types",
      "exp4": "There are 2 types of arrays in C++ programming:\n\n1. Single Dimensional Array\n2. Multidimensional Array",
      "title5": "Single Dimensional Array",
      "code_exec6": "#include <iostream>\n\nusing namespace std;\nint main() {\n  int arr[5] = {10,0,20,0,30}; \n  //creating and initializing array    \n  //traversing array    \n  for (int i = 0; i < 5; i++) {\n    cout << arr[i] << \"\\n\";\n  }\n}\n",
      "title7": "Multidimensional Array",
      "code_exec8": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n  int test[3][2] = {\n    {2,-5},{4,0},{9,1}\n  };\n\n  // Accessing two dimensional array using\n  // nested for loops\n  for (int i = 0; i < 3; ++i) {\n    for (int j = 0; j < 2; ++j) {\n      cout << \"test[\" << i << \"][\" << j << \"] = \" << test[i][j] << endl;\n    }\n  }\n\n  return 0;\n}\n",
      "topic": "Arrays"
    },
    {
      "title1": "Passing Array to Function",
      "exp2": "Arrays can be passed to a function as an argument.\n\nExample :",
      "code_exec3": "#include <iostream>\n\nusing namespace std;\n\nvoid display(int marks[5]);\n\nint main() {\n  int marks[5] = {\n    88,76,90,61,69\n  };\n  display(marks);\n  return 0;\n}\n\nvoid display(int m[5]) {\n  cout << \"Displaying marks: \" << endl;\n\n  for (int i = 0; i < 5; ++i) {\n    cout << \"Student \" << i + 1 << \": \" << m[i] << endl;\n  }\n}\n",
      "topic": "Array to Function"
    },
    {
      "title1": "Strings",
      "exp2": "In C++, string is an object of std::string class that represents sequence of characters. We can perform many operations on strings such as concatenation, comparison, conversion etc.\n\nExample :",
      "code_exec3": "#include <iostream>\n\nusing namespace std;\nint main() {\n  string s1 = \"Hello\";\n  char ch[] = {\n    'C','+','+'\n  };\n  string s2 = string(ch);\n  cout << s1 << endl;\n  cout << s2 << endl;\n}\n",
      "topic": "Strings"
    },
    {
      "title1": "Structures",
      "exp2": "Structure is a collection of variables of different data types under a single name. It is similar to a class in that, both holds a collection of data of different data types.\n\nSyntax :",
      "code_not_exec3": "struct Person\n{\n    char name[50];\n    int age;\n    float salary;\n};\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\n#include <cstring>\n \nusing namespace std;\n \nstruct Books {\n   char  title[50];\n   char  author[50];\n   char  subject[100];\n   int   book_id;\n};\n \nint main() {\n   struct Books Book1;        // Declare Book1 of type Book\n   struct Books Book2;        // Declare Book2 of type Book\n \n   // book 1 specification\n   strcpy( Book1.title, \"Learn C++ Programming\");\n   strcpy( Book1.author, \"Chand Miyan\"); \n   strcpy( Book1.subject, \"C++ Programming\");\n   Book1.book_id = 6495407;\n\n   // book 2 specification\n   strcpy( Book2.title, \"Telecom Billing\");\n   strcpy( Book2.author, \"Yakit Singha\");\n   strcpy( Book2.subject, \"Telecom\");\n   Book2.book_id = 6495700;\n \n   // Print Book1 info\n   cout << \"Book 1 title : \" << Book1.title <<endl;\n   cout << \"Book 1 author : \" << Book1.author <<endl;\n   cout << \"Book 1 subject : \" << Book1.subject <<endl;\n   cout << \"Book 1 id : \" << Book1.book_id <<endl;\n\n   // Print Book2 info\n   cout << \"Book 2 title : \" << Book2.title <<endl;\n   cout << \"Book 2 author : \" << Book2.author <<endl;\n   cout << \"Book 2 subject : \" << Book2.subject <<endl;\n   cout << \"Book 2 id : \" << Book2.book_id <<endl;\n\n   return 0;\n}\n",
      "topic": "Structures"
    },
    {
      "title1": "Structure and Function",
      "exp2": "Structure variables can be passed to a function and returned in a similar way as normal arguments.\n\nExample :",
      "code_exec3": "#include <iostream>\nusing namespace std;\n\nstruct Person\n{\n    char name[50];\n    int age;\n    float salary;\n};\n\nvoid displayData(Person);   // Function declaration\n\nint main()\n{\n    Person p;\n\n    cout << \"Enter Full name: \";\n    cin.get(p.name, 50);\n    cout << \"Enter age: \";\n    cin >> p.age;\n    cout << \"Enter salary: \";\n    cin >> p.salary;\n\n    // Function call with structure variable as an argument\n    displayData(p);\n\n    return 0;\n}\n\nvoid displayData(Person p)\n{\n    cout << \"\\nDisplaying Information.\" << endl;\n    cout << \"Name: \" << p.name << endl;\n    cout <<\"Age: \" << p.age << endl;\n    cout << \"Salary: \" << p.salary;\n}\n",
      "topic": "Structure and Function"
    },
    {
      "title1": "Pointers",
      "exp2": "Pointers are powerful features of C++ that differentiates it from other programming languages like Java and Python.\n\nPointers are used in C++ program to access the memory and manipulate the address.\n\nSyntax :",
      "code_exec3": "#include <iostream>\nusing namespace std;\n\nstruct Person\n{\n    char name[50];\n    int age;\n    float salary;\n};\n\nvoid displayData(Person);   // Function declaration\n\nint main()\n{\n    Person p;\n\n    cout << \"Enter Full name: \";\n    cin.get(p.name, 50);\n    cout << \"Enter age: \";\n    cin >> p.age;\n    cout << \"Enter salary: \";\n    cin >> p.salary;\n\n    // Function call with structure variable as an argument\n    displayData(p);\n\n    return 0;\n}\n\nvoid displayData(Person p)\n{\n    cout << \"\\nDisplaying Information.\" << endl;\n    cout << \"Name: \" << p.name << endl;\n    cout <<\"Age: \" << p.age << endl;\n    cout << \"Salary: \" << p.salary;\n}\n",
      "code_not_exec3": "int *p;\n      OR,\nint* p;\n",
      "exp4": "Example :",
      "code_exec5": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n  string food = \"Pizza\";  // A string variable\n  string* ptr = &food;  // A pointer variable that stores the address of food\n\n  // Output the value of food\n  cout << food << \"\\n\";\n\n  // Output the memory address of food\n  cout << &food << \"\\n\";\n\n  // Output the memory address of food with the pointer\n  cout << ptr << \"\\n\";\n  return 0;\n}\n",
      "topic": "Pointers"
    },
    {
      "title1": "Get Memory Address and Value",
      "exp2": "we used the pointer variable to get the memory address of a variable (used together with the & reference operator). However, you can also use the pointer to get the value of the variable, by using the * operator (the dereference operator)\n\nExample :",
      "code_exec3": "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n  string food = \"Pizza\";  // Variable declaration\n  string* ptr = &food;    // Pointer declaration\n\n  // Reference: Output the memory address of food with the pointer\n  cout << ptr << \"\\n\";\n\n  // Dereference: Output the value of food with the pointer\n  cout << *ptr << \"\\n\";\n  return 0;\n}\n",
      "topic": "Dereference"
    },
    {
      "title1": "What is OOP?",
      "exp2": "OOP stands for Object-Oriented Programming.\n\nProcedural programming is about writing procedures or functions that perform operations on the data, while object-oriented programming is about creating objects that contain both data and functions.\n\nObject-oriented programming has several advantages over procedural programming:\n\n• OOP is faster and easier to execute\n• OOP provides a clear structure for the programs\n• OOP helps to keep the C++ code DRY \"Don't Repeat Yourself\", and makes the code easier to maintain, modify and debug\n• OOP makes it possible to create full reusable applications with less code and shorter development time",
      "topic": "OOP"
    },
    {
      "title": "Class",
      "exp2": "Before you create an object in C++, you need to define a class.\n\nA class is a blueprint for the object.\n\nWe can think of class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows etc. Based on these descriptions we build the house. House is the object.\n\nAs, many houses can be made from the same description, we can create many objects from a class.\n\nSyntax :",
      "code_not_exec3": "class MyClass {       // The class\n  public:             // Access specifier\n    int myNum;        // Attribute (int variable)\n    string myString;  // Attribute (string variable)\n};\n",
      "exp4": "Example :",
      "code_exec5": "class Test\n{\n    private:\n        int data1;\n        float data2;  \n\n    public:  \n        void function1()\n        {   data1 = 2;  } \n\n        float function2()\n        { \n            data2 = 3.5;\n            return data2;\n        }\n   };\n",
      "title6": "Keywords: private and public",
      "exp7": "You may have noticed two keywords: private and public in the above example.\n\nThe private keyword makes data and functions private. Private data and functions can be accessed only from inside the same class.\n\nThe public keyword makes data and functions public. Public data and functions can be accessed out of the class.",
      "title8": "Objects",
      "exp9": " Object is an entity that has state and behavior. Here, state means data and behavior means functionality.\n\n\nObject is a runtime entity, it is created at runtime.\n\nObject is an instance of a class. All the members of the class can be accessed through object.\n\nLet's see an example to create object of student class using s1 as the reference variable.\n\nSyntax :",
      "code_not_exec10": "className objectVariableName;\n",
      "exp11": "Example :",
      "code_exec12": "// Program to illustrate the working of objects and class in C++ Programming\n#include <iostream>\nusing namespace std;\n\nclass Test\n{\n    private:\n        int data1;\n        float data2;\n\n    public:\n       \n       void insertIntegerData(int d)\n       {\n          data1 = d;\n          cout << \"Number: \" << data1;\n        }\n\n       float insertFloatData()\n       {\n           cout << \"\\nEnter data: \";\n           cin >> data2;\n           return data2;\n        }\n};\n\n int main()\n {\n      Test o1, o2;\n      float secondDataOfObject2;\n\n      o1.insertIntegerData(12);\n      secondDataOfObject2 = o2.insertFloatData();\n\n      cout << \"You entered \" << secondDataOfObject2;\n      return 0;\n }\n",
      "topic": "Classes and Objects"
    },
    {
      "title1": "Constructor",
      "exp2": "In C++, constructor is a special method which is invoked automatically at the time of object creation. It is used to initialize the data members of new object generally. The constructor in C++ has the same name as class or structure.\n\nThere can be two types of constructors.\n\n• Default constructor\n• Parameterized constructor",
      "title3": "Default constructor",
      "exp4": "A constructor which has no argument is known as default constructor. It is invoked at the time of creating object.",
      "code_exec5": "#include <iostream>  \nusing namespace std;  \nclass Employee  \n {  \n   public:  \n        Employee()    \n        {    \n            cout<<\"Default Constructor Invoked\"<<endl;    \n        }    \n};  \nint main(void)   \n{  \n    Employee e1; //creating an object of Employee   \n    Employee e2;   \n    return 0;  \n}  \n",
      "title6": "Parameterized Constructor",
      "exp7": "A constructor which has parameters is called parameterized constructor. It is used to provide different values to distinct objects.",
      "code_exec8": "#include <iostream>\nusing namespace std;\n\nclass Car {        // The class\n  public:          // Access specifier\n    string brand;  // Attribute\n    string model;  // Attribute\n    int year;      // Attribute\n    Car(string x, string y, int z) {  // Constructor with parameters\n      brand = x;\n      model = y;\n      year = z;\n    }\n};\n\nint main() {\n  // Create Car objects and call the constructor with different values\n  Car carObj1(\"BMW\", \"X5\", 1999);\n  Car carObj2(\"Ford\", \"Mustang\", 1969);\n\n  // Print values\n  cout << carObj1.brand << \" \" << carObj1.model << \" \" << carObj1.year << \"\\n\";\n  cout << carObj2.brand << \" \" << carObj2.model << \" \" << carObj2.year << \"\\n\";\n  return 0;\n}\n",
      "topic": "Constructors"
    },
    {
      "title1": "Constructor Overloading",
      "exp2": "Constructor can be overloaded in a similar way as function overloading.\n\nOverloaded constructors have the same name (name of the class) but different number of arguments.\n\nDepending upon the number and type of arguments passed, specific constructor is called.\n\nExample :",
      "code_exec3": "// Source Code to demonstrate the working of overloaded constructors\n#include <iostream>\nusing namespace std;\n\nclass Area\n{\n    private:\n       int length;\n       int breadth;\n\n    public:\n       // Constructor with no arguments\n       Area(): length(5), breadth(2) { }\n\n       // Constructor with two arguments\n       Area(int l, int b): length(l), breadth(b){ }\n\n       void GetLength()\n       {\n           cout << \"Enter length and breadth respectively: \";\n           cin >> length >> breadth;\n       }\n\n       int AreaCalculation() {  return length * breadth;  }\n\n       void DisplayArea(int temp)\n       {\n           cout << \"Area: \" << temp << endl;\n       }\n};\n\nint main()\n{\n    Area A1, A2(2, 1);\n    int temp;\n\n    cout << \"Default Area when no argument is passed.\" << endl;\n    temp = A1.AreaCalculation();\n    A1.DisplayArea(temp);\n\n    cout << \"Area when (2,1) is passed as argument.\" << endl;\n    temp = A2.AreaCalculation();\n    A2.DisplayArea(temp);\n\n    return 0;\n}\n",
      "topic": "Constructor Overloading"
    },
    {
      "title1": "C++ Destructor",
      "exp2": "\nnext →← prev\nC++ Destructor\nA destructor works opposite to constructor; it destructs the objects of classes. It can be defined only once in a class. Like constructors, it is invoked automatically.\n\nA destructor is defined like constructor. It must have same name as class. But it is prefixed with a tilde sign (~).\n\nExample :",
      "code_exec3": "#include <iostream>  \nusing namespace std;  \nclass Employee  \n {  \n   public:  \n        Employee()    \n        {    \n            cout<<\"Constructor Invoked\"<<endl;    \n        }    \n        ~Employee()    \n        {    \n            cout<<\"Destructor Invoked\"<<endl;    \n        }  \n};  \nint main(void)   \n{  \n    Employee e1; //creating an object of Employee   \n    Employee e2; //creating an object of Employee  \n    return 0;  \n}  \n",
      "topic": "Destructor"
    },
    {
      "title1": "this Pointer",
      "exp2": "In C++ programming, this is a keyword that refers to the current instance of the class. There can be 3 main usage of this keyword in C++.\n\n• It can be used to pass current object as a parameter to another method.\n• It can be used to refer current class instance variable.\n• It can be used to declare indexers.\n\nExample :",
      "code_exec3": "#include <iostream>  \nusing namespace std;  \nclass Employee {  \n   public:  \n       int id; //data member (also instance variable)      \n       string name; //data member(also instance variable)  \n       float salary;  \n       Employee(int id, string name, float salary)    \n        {    \n             this->id = id;    \n            this->name = name;    \n            this->salary = salary;   \n        }    \n       void display()    \n        {    \n            cout<<id<<\"  \"<<name<<\"  \"<<salary<<endl;    \n        }    \n};  \nint main(void) {  \n    Employee e1 =Employee(101, \"Sonoo\", 890000); //creating an object of Employee   \n    Employee e2=Employee(102, \"Nakul\", 59000); //creating an object of Employee  \n    e1.display();    \n    e2.display();    \n    return 0;  \n}  \n",
      "topic": "this Pointer"
    }
  ],
  "Java": [
    {
      "title1": "Hello World program in Java",
      "code_exec2": "// Your First Program\n\nclass HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, World!\"); \n    }\n}\n",
      "title3": "1. // Your First Program",
      "exp4": "In Java, any line starting with// is a comment.\nComments are intended for users reading the code to better understand the intent and functionality of the program.\nIt is completely ignored by the Java compiler.",
      "topic": "Syntax"
    },
    {
      "title1": "If-else Statement",
      "exp2": "The Java if statement is used to test the condition. It checks boolean condition: true or false. There are various types of if statement in Java.\n\n• if statement\n• if-else statement\n• if-else-if ladder\n• nested if statement",
      "title3": "if Statement",
      "exp4": "Use the if statement to specify a block of Java code to be executed if a condition is true.",
      "code_exec5": "//Java Program to demonstrate the use of if statement.  \npublic class IfExample {\n public static void main(String[] args) {\n  //defining an 'age' variable  \n  int age = 20;\n  //checking the age  \n  if (age > 18) {\n   System.out.print(\"Age is greater than 18\");\n  }\n }\n}\n",
      "title6": "if-else Statement",
      "exp7": "The Java if-else statement also tests the condition. It executes the if block if condition is true otherwise else block is executed.",
      "code_exec8": "//It is a program of odd and even number.  \npublic class IfElseExample {\n public static void main(String[] args) {\n  //defining a variable  \n  int number = 13;\n  //Check if the number is divisible by 2 or not  \n  if (number % 2 == 0) {\n   System.out.println(\"even number\");\n  } else {\n   System.out.println(\"odd number\");\n  }\n }\n}\n",
      "title9": "if-else-if ladder Statement",
      "exp10": "The if-else-if ladder statement executes one condition from multiple statements.",
      "code_exec11": "public class PositiveNegativeExample {\n public static void main(String[] args) {\n  int number = -13;\n  if (number > 0) {\n   System.out.println(\"POSITIVE\");\n  } else if (number < 0) {\n   System.out.println(\"NEGATIVE\");\n  } else {\n   System.out.println(\"ZERO\");\n  }\n }\n}\n",
      "title12": "Nested if-else Statement",
      "exp13": "In Java, it is also possible to if..else statements inside a if..else statement. It's called nested if...else statement.",
      "code_exec14": "//Java Program to demonstrate the use of Nested If Statement.  \npublic class JavaNestedIfExample {    \npublic static void main(String[] args) {    \n    //Creating two variables for age and weight  \n    int age=20;  \n    int weight=80;    \n    //applying condition on age and weight  \n    if(age>=18){    \n        if(weight>50){  \n            System.out.println(\"You are eligible to donate blood\");  \n        }    \n    }    \n}}  \n",
      "topic": "if-else"
    },
    {
      "title1": "Switch Statements",
      "exp2": "A switch statement allows a variable to be tested for equality against a list of values.\nEach value is called a case, and the variable being switched on is checked for each case.\n\nSyntax :",
      "code_not_exec3": "switch (variable/expression) {\ncase value1:\n   // statements of case1\n   break;\n\ncase value2:\n   // statements of case2\n   break;\n\n   .. .. ...\n   .. .. ...\n\ndefault:\n   // default statements\n}\n",
      "exp4": "Example :",
      "code_exec5": "public class SwitchExample {\n public static void main(String[] args) {\n  //Declaring a variable for switch expression  \n  int number = 20;\n  //Switch expression  \n  switch (number) {\n   //Case statements  \n   case 10:\n    System.out.println(\"10\");\n    break;\n   case 20:\n    System.out.println(\"20\");\n    break;\n   case 30:\n    System.out.println(\"30\");\n    break;\n    //Default case statement  \n   default:\n    System.out.println(\"Not in 10, 20 or 30\");\n  }\n }\n}\n",
      "topic": "switch"
    },
    {
      "title1": "For Loop",
      "exp2": "The Java for loop is used to iterate a part of the program several times. If the number of iteration is fixed, it is recommended to use for loop.\n\nThere are three types of for loops in java.\n• Simple For Loop\n• For-each or Enhanced For Loop\n• Labeled For Loop",
      "title3": "For Loop",
      "exp4": "When you know exactly how many times you want to loop through a block of code, use the for loop instead of a while loop.\n\nSyntax :",
      "code_not_exec5": "for (initialization; condition; incr / decr) {\n //statement or code to be executed  \n}\n",
      "exp6": "Example :",
      "code_exec7": "// Program to find the sum of natural numbers from 1 to 1000.\n\nclass Number {\n public static void main(String[] args) {\n\n  int sum = 0;\n\n  for (int i = 1; i <= 1000; ++i) {\n   sum += i; // sum = sum + i\n  }\n\n  System.out.println(\"Sum = \" + sum);\n }\n}\n",
      "title8": "for-each Loop",
      "exp9": "The for-each loop is used to traverse array or collection in java. It is easier to use than simple for loop because we don't need to increment value and use subscript notation.\n\nSyntax :",
      "code_not_exec10": "for (type variableName : arrayName) {\n  // code block to be executed\n}\n",
      "exp11": "Example :",
      "code_exec12": "class EnhancedForLoop {\n    public static void main(String[] args) {\n      \n        int[] numbers = {3, 4, 5, -5, 0, 12};\n        int sum = 0;\n      \n        for (int number: numbers) {\n            sum += number;\n        }\n      \n        System.out.println(\"Sum = \" + sum);\n    }\n}\n",
      "title13": "Labeled For Loop",
      "exp14": "We can have a name of each Java for loop. To do so, we use label before the for loop. It is useful if we have nested for loop so that we can break/continue specific for loop.\n\nSyntax :",
      "code_not_exec15": "labelname:\n for (initialization; condition; incr / decr) {\n  //code to be executed  \n }\n",
      "exp16": "Example :",
      "code_exec17": "//A Java program to demonstrate the use of labeled for loop  \npublic class LabeledForExample {  \npublic static void main(String[] args) {  \n    //Using Label for outer and for loop  \n    aa:  \n        for(int i=1;i<=3;i++){  \n            bb:  \n                for(int j=1;j<=3;j++){  \n                    if(i==2&&j==2){  \n                        break aa;  \n                    }  \n                    System.out.println(i+\" \"+j);  \n                }  \n        }  \n}  \n}  \n",
      "topic": "for Loop"
    },
    {
      "title1": "While Loop",
      "exp2": "The Java while loop is used to iterate a part of the program several times. If the number of iteration is not fixed, it is recommended to use while loop.\n\nSyntax :",
      "code_not_exec3": "while (condition) {\n  // code block to be executed\n}\n",
      "exp4": "Example :",
      "code_exec5": "public class MyClass {\n  public static void main(String[] args) {\n    int i = 0;\n    while (i < 5) {\n      System.out.println(i);\n      i++;\n    }  \n  }\n}\n",
      "topic": "while Loop"
    },
    {
      "title1": "do-while Loop",
      "exp2": "The Java do-while loop is used to iterate a part of the program several times. If the number of iteration is not fixed and you must have to execute the loop at least once, it is recommended to use do-while loop.\n\nThe Java do-while loop is executed at least once because condition is checked after loop body.\n\nSyntax :",
      "code_not_exec3": "do {\n  // code block to be executed\n}\nwhile (condition);\n",
      "exp4": "Example :",
      "code_exec5": "public static void main(String[] args) {\n    int i = 0;\n    do {\n      System.out.println(i);\n      i++;\n    }\n    while (i < 5);  \n  }\n}\n",
      "topic": "do-while Loop"
    },
    {
      "title1": "Break Statement",
      "exp2": "The Java break statement is used to break loop or switch statement. \nIt breaks the current flow of the program at specified condition. \nIn case of inner loop, it breaks only inner loop.\n\nExample :",
      "code_exec3": "public class MyClass {\n  public static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n      if (i == 4) {\n        break;\n      }\n      System.out.println(i);\n    }  \n  }\n}\n",
      "topic": "break"
    },
    {
      "title1": "Continue Statement",
      "exp2": "The continue statement breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.\n\nExample :",
      "code_exec3": "public class MyClass {\n  public static void main(String[] args) {\n    for (int i = 0; i < 10; i++) {\n      if (i == 4) {\n        continue;\n      }\n      System.out.println(i);\n    }  \n  }\n}\n",
      "topic": "continue"
    }
  ],
  "Python": [
    {
      "title1": "Execute Python Syntax",
      "exp2": "Python syntax can be executed by writing directly in the Command Line:",
      "code_not_exec3": ">>> print(\"Hello, World!\")\nHello, World!\n",
      "title4": "Python Indentation",
      "exp5": "Indentation refers to the spaces at the beginning of a code line.\n\nWhere in other programming languages the indentation in code is for readability only, the indentation in Python is very important.\n\nPython uses indentation to indicate a block of code.\n\nExample : ",
      "code_exec6": "if 5 > 2:\n  print(\"Five is greater than two!\")\n",
      "exp7": "Python will give you an error if you skip the indentation:\n\nExample :",
      "code_exec8": "if 5 > 2:\nprint(\"Five is greater than two!\")\n",
      "exp9": "The number of spaces is up to you as a programmer, but it has to be at least one.\n\nExample :",
      "code_exec10": "if 5 > 2:\n print(\"Five is greater than two!\") \nif 5 > 2:\n        print(\"Five is greater than two!\") \n",
      "exp11": "You have to use the same number of spaces in the same block of code, otherwise Python will give you an error:\n\nExample :",
      "code_exec12": "if 5 > 2:\n print(\"Five is greater than two!\")\n        print(\"Five is greater than two!\")\n",
      "topic": "Python Syntax"
    },
    {
      "title1": "Python Comments",
      "exp2": "Comments can be used to explain Python code.\nComments can be used to make the code more readable.\nComments can be used to prevent execution when testing code.\n\nPython supports two types of comments:\n",
      "title3": "1) Single Line Comment:",
      "exp4": "In case user wants to specify a single line comment, then comment must start with #\n\nExample :",
      "code_exec5": "#This is a comment\nprint(\"Hello, World!\")\n",
      "title6": "2) Multi Line Comment:",
      "exp7": "Python does not really have a syntax for multi line comments.\nTo add a multiline comment you could insert a # for each line.\n\nExample :",
      "code_exec8": "#This is a comment\n#written in\n#more than just one line\nprint(\"Hello, World!\")\n",
      "topic": "Comments"
    },
    {
      "title1": "Python Variables",
      "exp2": "Variable is a name which is used to refer memory location. Variable also known as identifier and used to hold value.\n\nIn Python, we don't need to specify the type of variable because Python is a type infer language and smart enough to get variable type.\n\nVariable names can be a group of both letters and digits, but they have to begin with a letter or an underscore.\n\nExample :",
      "code_exec3": "x = 5\ny = \"John\"\nprint(x)\nprint(y)\n",
      "title4": "Assign Value to Multiple Variables",
      "exp5": "Python allows you to assign values to multiple variables in one line.\n\nExample :",
      "code_exec6": "x, y, z = \"Orange\", \"Banana\", \"Cherry\"\nprint(x)\nprint(y)\nprint(z)\n",
      "exp7": "Assigning single value to multiple variables\n\nExample :",
      "code_exec8": "x=y=z=50  \nprint(x)  \nprint(y)  \nprint(z)  \n",
      "topic": "Variables"
    },
    {
      "title1": "Data types in Python",
      "exp2": "Every value in Python has a datatype. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.\n\nThere are various data types in Python. Some of the important types are listed below.",
      "title3": "Python Numbers",
      "exp4": "Integers, floating point numbers and complex numbers fall under Python numbers category. They are defined as int, float and complex classes in Python.\n\nWe can use the type() function to know which class a variable or a value belongs to. Similarly, the isinstance() function is used to check if an object belongs to a particular class.\n\nExample :",
      "code_exec5": "a = 5\nprint(a, \"is of type\", type(a))\n\na = 2.0\nprint(a, \"is of type\", type(a))\n\na = 1+2j\nprint(a, \"is complex number?\", isinstance(1+2j,complex))\n",
      "title6": "List",
      "exp7": "A list is a collection which is ordered and changeable. In Python lists are written with square brackets.\n\nExample :",
      "code_exec8": "a = [5,10,15,20,25,30,35,40]\n\n# a[2] = 15\nprint(\"a[2] = \", a[2])\n\n# a[0:3] = [5, 10, 15]\nprint(\"a[0:3] = \", a[0:3])\n\n# a[5:] = [30, 35, 40]\nprint(\"a[5:] = \", a[5:])\n",
      "title9": "Tuple",
      "exp10": "Tuple is an ordered sequence of items same as a list. The only difference is that tuples are immutable. Tuples once created cannot be modified.\n\nTuples are used to write-protect data and are usually faster than lists as they cannot change dynamically.\n\nExample :",
      "code_exec11": "t = (5,'program', 1+3j)\n\n# t[1] = 'program'\nprint(\"t[1] = \", t[1])\n\n# t[0:3] = (5, 'program', (1+3j))\nprint(\"t[0:3] = \", t[0:3])\n\n# Generates error\n# Tuples are immutable\nt[0] = 10\n",
      "title12": "Strings",
      "exp13": "String is sequence of Unicode characters. We can use single quotes or double quotes to represent strings. Multi-line strings can be denoted using triple quotes, ''' or \"\"\".\n\nExample",
      "code_exec14": "s = \"This is a string\"\nprint(s)\ns = '''A multiline\nstring'''\nprint(s)\n",
      "title15": "Set",
      "exp16": "Set is an unordered collection of unique items. Set is defined by values separated by comma inside braces { }. Items in a set are not ordered.\n\nExample",
      "code_exec17": "a = {5,2,3,1,4}\n\n# printing set variable\nprint(\"a = \", a)\n\n# data type of variable a\nprint(type(a))\n",
      "title18": "Dictionaries",
      "exp19": "A dictionary is a collection which is unordered, changeable and indexed. In Python dictionaries are written with curly brackets, and they have keys and values.\n\nExample",
      "code_exec20": "d = {1:'value','key':2}\nprint(type(d))\n\nprint(\"d[1] = \", d[1]);\n\nprint(\"d['key'] = \", d['key']);\n\n# Generates error\nprint(\"d[2] = \", d[2]);\n",
      "topic": "Data Types"
    },
    {
      "title1": "Keywords",
      "exp2": "Python Keywords are special reserved words which convey a special meaning to the compiler/interpreter. Each keyword have a special meaning and a specific operation. These keywords can't be used as variable. Following is the List of Python Keywords.\n • True\t\u2022 False\t\u2022 None\t\u2022 and\t\u2022 as\u2022 asset\t\u2022 def\t\u2022 class\t\u2022 continue\t\u2022 break\u2022 else\t\u2022 finally\t\u2022 elif\t\u2022 del\t\u2022 except\u2022 global\t\u2022 for\t\u2022 if\t\u2022 from\t\u2022 import\u2022 raise\t\u2022 try\t\u2022 or\t\u2022 return\t\u2022 pass\u2022 nonlocal\t\u2022 in\t\u2022 not\t\u2022 is\t\u2022 lambda",
      "topic": "Keywords"
    },
    {
      "title1": "Operators",
      "exp2": "Operators are used to perform operations on variables and values.\n\nPython divides the operators in the following groups:\n\n\u2022Arithmetic operators\n\u2022Assignment operators\n\u2022Comparison operators\n\u2022Logical operators\n\u2022Identity operators\n\u2022Membership operators\n\u2022Bitwise operators",
      "title3": "Arithmetic Operators",
      "exp4": "Arithmetic operators are used with numeric values to perform common mathematical operations.\n\nExample",
      "code_exec5": "x = 15\ny = 4\n\n# Output: x + y = 19\nprint('x + y =',x+y)\n\n# Output: x - y = 11\nprint('x - y =',x-y)\n\n# Output: x * y = 60\nprint('x * y =',x*y)\n\n# Output: x / y = 3.75\nprint('x / y =',x/y)\n\n# Output: x // y = 3\nprint('x // y =',x//y)\n\n# Output: x ** y = 50625\nprint('x ** y =',x**y)\n",
      "title6": "Assignment Operators",
      "exp7": "Assignment operators are used to assign values to variables\n\nExample",
      "code_exec8": "a = 21\nb = 10\nc = 0\n\nc = a + b\nprint \"Line 1 - Value of c is \", c\n\nc += a\nprint \"Line 2 - Value of c is \", c \n\nc *= a\nprint \"Line 3 - Value of c is \", c \n\nc /= a \nprint \"Line 4 - Value of c is \", c \n\nc  = 2\nc %= a\nprint \"Line 5 - Value of c is \", c\n\nc **= a\nprint \"Line 6 - Value of c is \", c\n\nc //= a\nprint \"Line 7 - Value of c is \", c\n",
      "title9": "Comparison operators",
      "exp10": "Comparison operators are used to compare values. It returns either True or False according to the condition.\n\nExample",
      "code_exec11": "x = 10\ny = 12\n\n# Output: x > y is False\nprint('x > y is',x>y)\n\n# Output: x < y is True\nprint('x < y is',x<y)\n\n# Output: x == y is False\nprint('x == y is',x==y)\n\n# Output: x != y is True\nprint('x != y is',x!=y)\n\n# Output: x >= y is False\nprint('x >= y is',x>=y)\n\n# Output: x <= y is True\nprint('x <= y is',x<=y)\n",
      "title12": "Logical Operators",
      "exp13": "Logical operators are used to combine conditional statements:\n\nExample",
      "code_exec14": "x = True\ny = False\n\nprint('x and y is',x and y)\n\nprint('x or y is',x or y)\n\nprint('not x is',not x)\n",
      "title15": "Identity operators",
      "exp16": "Identity operators are used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location:\n\nExample",
      "code_exec17": "x1 = 5\ny1 = 5\nx2 = 'Hello'\ny2 = 'Hello'\nx3 = [1,2,3]\ny3 = [1,2,3]\n\n# Output: False\nprint(x1 is not y1)\n\n# Output: True\nprint(x2 is y2)\n\n# Output: False\nprint(x3 is y3)\n",
      "title18": "Membership operators",
      "exp19": "in and not in are the membership operators in Python. They are used to test whether a value or variable is found in a sequence (string, list, tuple, set and dictionary).\n\nExample",
      "code_exec20": "x = 'Hello world'\ny = {1:'a',2:'b'}\n\n# Output: True\nprint('H' in x)\n\n# Output: True\nprint('hello' not in x)\n\n# Output: True\nprint(1 in y)\n\n# Output: False\nprint('a' in y)\n",
      "title21": "Bitwise operators",
      "exp22": "Bitwise operators act on operands as if they were strings of binary digits. They operate bit by bit, hence the name.\n\nExample",
      "code_exec23": "a = 60            # 60 = 0011 1100 \nb = 13            # 13 = 0000 1101 \nc = 0\n\nc = a & b;        # 12 = 0000 1100\nprint \"Line 1 - Value of c is \", c\n\nc = a | b;        # 61 = 0011 1101 \nprint \"Line 2 - Value of c is \", c\n\nc = a ^ b;        # 49 = 0011 0001\nprint \"Line 3 - Value of c is \", c\n\nc = ~a;           # -61 = 1100 0011\nprint \"Line 4 - Value of c is \", c\n\nc = a << 2;       # 240 = 1111 0000\nprint \"Line 5 - Value of c is \", c\n\nc = a >> 2;       # 15 = 0000 1111\nprint \"Line 6 - Value of c is \", c\n",
      "topic": "Operators"
    },
    {
      "title1": "Python Conditions and If statements",
      "exp2": "Python supports the usual logical conditions from mathematics:\n\n• Equals: a == b\n• Not Equals: a != b\n• Less than: a < b\n• Less than or equal to: a <= b\n• Greater than: a > b\n• Greater than or equal to: a >= b\n\nThese conditions can be used in several ways, most commonly in \"if statements\" and loops.\n\nAn \"if statement\" is written by using the if keyword.\n\nExample :",
      "code_exec3": "a = 33\nb = 200\nif b > a:\n  print(\"b is greater than a\")\n",
      "title4": "Indentation",
      "exp5": "Python relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.\n\nExample :",
      "code_exec6": "a = 33\nb = 200\nif b > a:\nprint(\"b is greater than a\")\n# you will get an error\n",
      "title7": "elif",
      "exp8": "The elif keyword is pythons way of saying \"if the previous conditions were not true, then try this condition\".\n\nExample :",
      "code_exec9": "a = 33\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")\n",
      "title10": "else",
      "exp11": "The else keyword catches anything which isn't caught by the preceding conditions.\n\nExample :",
      "code_exec12": "a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")\nelse:\n  print(\"a is greater than b\")\n",
      "exp13": "You can also have an else without the elif:\n\nExample :",
      "code_exec14": "a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelse:\n  print(\"b is not greater than a\")\n",
      "title15": "Short Hand If",
      "exp16": "If you have only one statement to execute, you can put it on the same line as the if statement.\n\nExample :",
      "code_exec17": "a = 200\nb = 33\n\nif a > b: print(\"a is greater than b\")\n",
      "title18": "Short Hand if...else",
      "exp19": "If you have only one statement to execute, one for if, and one for else, you can put it all on the same line:\n\nExample :",
      "code_exec20": "a = 2\nb = 330\nprint(\"A\") if a > b else print(\"B\")\n",
      "exp21": "This technique is known as Ternary Operators, or Conditional Expressions.",
      "title22": "And",
      "exp23": "The and keyword is a logical operator, and is used to combine conditional statements:\n\nExample :",
      "code_exec24": "a = 200\nb = 33\nc = 500\nif a > b and c > a:\n  print(\"Both conditions are True\")\n",
      "title25": "Or",
      "exp26": "The or keyword is a logical operator, and is used to combine conditional statements:\n\nExample :",
      "code_exec27": "b = 33\nc = 500\nif a > b or a > c:\n  print(\"At least one of the conditions is True\")\n",
      "title28": "Nested If",
      "exp29": "You can have if statements inside if statements, this is called nested if statements.\n\nExample :",
      "code_exec30": "x = 41\n\nif x > 10:\n  print(\"Above ten,\")\n  if x > 20:\n    print(\"and also above 20!\")\n  else:\n    print(\"but not above 20.\")\n",
      "title31": "The pass Statement",
      "exp32": "if statements cannot be empty, but if you for some reason have an if statement with no content, put in the pass statement to avoid getting an error.Example :",
      "code_exec33": "a = 33\nb = 200\n\nif b > a:\n  pass\n\n# having an empty if statement like this, would raise an error without the pass statement\n",
      "topic": "if...else"
    },
    {
      "title1": "while Loop",
      "exp2": "With the while loop we can execute a set of statements as long as a condition is true.\n\nExample :",
      "code_exec3": "i = 1\nwhile i < 6:\n  print(i)\n  i += 1\n",
      "title4": "else Statement",
      "exp5": "With the else statement we can run a block of code once when the condition no longer is true:\n\nExample :",
      "code_exec6": "i = 1\nwhile i < 6:\n  print(i)\n  i += 1\nelse:\n  print(\"i is no longer less than 6\")\n",
      "title": "",
      "exp": "",
      "code_exec": "",
      "topic": "while loop"
    },
    {
      "title1": "for Loop",
      "exp2": "The for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. Iterating over a sequence is called traversal.\n\nExample :",
      "code_exec3": "# Program to find the sum of all numbers stored in a list\n\n# List of numbers\nnumbers = [6, 5, 3, 8, 4, 2, 5, 4, 11]\n\n# variable to store the sum\nsum = 0\n\n# iterate over the list\nfor val in numbers:\n\tsum = sum+val\n\nprint(\"The sum is\", sum)\n",
      "title4": "The range() Function",
      "exp5": "To loop through a set of code a specified number of times, we can use the range() function,\nThe range() function returns a sequence of numbers, starting from 0 by default, and increments by 1 (by default), and ends at a specified number.\n\nExample :",
      "code_exec6": "for x in range(6):\n  print(x)\n",
      "exp7": "Note that range(6) is not the values of 0 to 6, but the values 0 to 5.",
      "title8": "Using the start parameter:",
      "exp9": "The range() function defaults to 0 as a starting value, however it is possible to specify the starting value by adding a parameter: range(2, 6), which means values from 2 to 6 (but not including 6):\n\nExample :",
      "code_exec10": "for x in range(2, 6):\n  print(x)\n",
      "title11": "Increment the sequence",
      "exp12": "The range() function defaults to increment the sequence by 1, however it is possible to specify the increment value by adding a third parameter: range(2, 30, 3):\nIncrement the sequence with 3 (default is 1):\n\nExample :",
      "code_exec13": "for x in range(2, 30, 3):\n  print(x)\n",
      "title14": "Else in For Loop",
      "exp15": "The else keyword in a for loop specifies a block of code to be executed when the loop is finished:\n\nExample :",
      "code_exec16": "for x in range(6):\n  print(x)\nelse:\n  print(\"Finally finished!\")\n",
      "title17": "Nested Loops",
      "exp18": "A nested loop is a loop inside a loop.\n\nThe \"inner loop\" will be executed one time for each iteration of the \"outer loop\":\n\nExample :",
      "code_exec19": "adj = [\"red\", \"big\", \"tasty\"]\nfruits = [\"apple\", \"banana\", \"cherry\"]\n\nfor x in adj:\n  for y in fruits:\n    print(x, y)\n",
      "topic": "for loop"
    },
    {
      "title1": "break statement",
      "exp2": "The break statement terminates the loop containing it. Control of the program flows to the statement immediately after the body of the loop.\n\nIf the break statement is inside a nested loop (loop inside another loop), the break statement will terminate the innermost loop.\n\nExample :",
      "code_exec3": "# Use of break statement inside the loop\n\nfor val in \"string\":\n    if val == \"i\":\n        break\n    print(val)\n\nprint(\"The end\")\n",
      "title4": "continue statement",
      "exp5": "The continue statement is used to skip the rest of the code inside a loop for the current iteration only. Loop does not terminate but continues on with the next iteration.\n\nExample :",
      "code_exec6": "# Program to show the use of continue statement inside loops\n\nfor val in \"string\":\n    if val == \"i\":\n        continue\n    print(val)\n\nprint(\"The end\")\n",
      "topic": "break and continue"
    },
    {
      "title1": "pass statement ",
      "exp2": "In Python programming, the pass statement is a null statement. The difference between a comment and a pass statement in Python is that while the interpreter ignores a comment entirely, pass is not ignored.\n\nHowever, nothing happens when the pass is executed. It results in no operation (NOP).\n\nExample :",
      "code_exec3": "a = 33\nb = 200\n\nif b > a:\n  pass\n",
      "topic": "pass statement"
    },
    {
      "title1": "Functions",
      "exp2": "A function is a block of code which only runs when it is called.\n\nYou can pass data, known as parameters, into a function.\n\nA function can return data as a result.",
      "title3": "Creating a Function",
      "exp4": "In Python a function is defined using the def keyword:\n\nExample :",
      "code_not_exec5": "def my_function():\n  print(\"Hello from a function\")\n",
      "title6": "Calling a Function",
      "exp7": "To call a function, use the function name followed by parenthesis:\n\nExample :",
      "code_exec8": "def my_function():\n  print(\"Hello from a function\")\n\nmy_function()\n",
      "topic": "Functions"
    },
    {
      "title1": "Function Arguments",
      "exp2": "Information can be passed into functions as arguments.\n\nArguments are specified after the function name, inside the parentheses. You can add as many arguments as you want, just separate them with a comma.\n\nExample :",
      "code_exec3": "def my_function(fname):\n  print(fname + \" Refsnes\")\n\nmy_function(\"Emil\")\nmy_function(\"Tobias\")\nmy_function(\"Linus\")\n",
      "title4": "Default Arguments",
      "exp5": "Function arguments can have default values in Python.\n\nWe can provide a default value to an argument by using the assignment operator (=).\n\nExample :",
      "code_exec6": "def greet(name, msg=\"Good morning!\"):\n    \"\"\"\n    This function greets to\n    the person with the\n    provided message.\n\n    If the message is not provided,\n    it defaults to \"Good\n    morning!\"\n    \"\"\"\n\n    print(\"Hello\", name + ', ' + msg)\n\n\ngreet(\"Kate\")\ngreet(\"Bruce\", \"How do you do?\")\n",
      "title7": "Arbitrary Arguments",
      "exp8": "Sometimes, we do not know in advance the number of arguments that will be passed into a function. Python allows us to handle this kind of situation through function calls with an arbitrary number of arguments.\n\nIn the function definition, we use an asterisk (*) before the parameter name to denote this kind of argument.\n\nExample :",
      "code_exec9": "def greet(*names):\n    \"\"\"This function greets all\n    the person in the names tuple.\"\"\"\n\n    # names is a tuple with arguments\n    for name in names:\n        print(\"Hello\", name)\n\n\ngreet(\"Monica\", \"Luke\", \"Steve\", \"John\")\n",
      "topic": "Function Arguments"
    },
    {
      "title1": "Anonymous/Lambda Function",
      "exp2": "In Python, an anonymous function is a function that is defined without a name.\n\nWhile normal functions are defined using the def keyword in Python, anonymous functions are defined using the lambda keyword.\n\nHence, anonymous functions are also called lambda functions.\n\nExample :",
      "code_exec3": "# Program to show the use of lambda functions\ndouble = lambda x: x * 2\n\nprint(double(5))\n",
      "title4": "Lambda Function in python",
      "exp5": "In Python, we generally use it as an argument to a higher-order function (a function that takes in other functions as arguments). Lambda functions are used along with built-in functions like filter(), map() etc.\n\nExample :",
      "title6": "Example use with filter()",
      "exp7": "The filter() function in Python takes in a function and a list as arguments.\n\nThe function is called with all the items in the list and a new list is returned which contains items for which the function evaluates to True.\n\nExample :",
      "code_exec8": "# Program to filter out only the even items from a list\nmy_list = [1, 5, 4, 6, 8, 11, 3, 12]\n\nnew_list = list(filter(lambda x: (x%2 == 0) , my_list))\n\nprint(new_list)\n",
      "topic": "Anonymous Function"
    },
    {
      "title1": "Global Variables",
      "exp2": "In Python, a variable declared outside of the function or in global scope is known as a global variable. This means that a global variable can be accessed inside or outside of the function.\n\nExample :",
      "code_exec3": "x = \"global\"\n\ndef foo():\n print(\"x inside:\", x)\n\nfoo()\nprint(\"x outside:\", x)\n",
      "title4": "Local Variables",
      "exp5": "A variable declared inside the function's body or in the local scope is known as local variable.\n\nExample :",
      "code_exec6": "def foo():\n y = \"local\"\n print(y)\n\nfoo()\n",
      "exp7": "Global and local variables\n\nExample :",
      "code_exec8": "x = \"global\"\n\ndef foo():\n global x\n y = \"local\"\n x = x * 2\n print(x)\n print(y)\n \nfoo()\n",
      "title9": "Nonlocal Variables",
      "exp10": "Nonlocal variable are used in nested function whose local scope is not defined. This means that the variable can be neither in the local nor the global scope.\n\nLet's see an example of how a global variable is created in Python.\n\nWe use nonlocal keyword to create nonlocal variable.\n\nExample :",
      "code_exec11": "def outer():\n x = \"local\"\n \n def inner():\n nonlocal x\n x = \"nonlocal\"\n print(\"inner:\", x)\n \n inner()\n print(\"outer:\", x)\n\nouter()\n",
      "topic": "Global, Local and Nonlocal variables"
    },
    {
      "title1": "Global Keyword",
      "exp2": "In Python, global keyword allows you to modify the variable outside of the current scope. It is used to create a global variable and make changes to the variable in a local context.",
      "title3": "Rules of global Keyword",
      "exp4": "The basic rules for global keyword in Python are:\n\n• When we create a variable inside a function, it is local by default.\n• When we define a variable outside of a function, it is global by default. You don't have to use global keyword.\n• We use global keyword to read and write a global variable inside a function.\n• Use of global keyword outside a function has no effect.\n\nExample : Accessing global Variable From Inside a Function",
      "code_exec5": "c = 1 # global variable\n\ndef add():\n    print(c)\n\nadd()\n",
      "topic": "Global Keyword"
    }
  ]
}
